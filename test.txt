Started server http://localhost:8585
Hi !
FindCursor {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  [Symbol(kCapture)]: false,
  documents: null,
  hasEmittedClose: false,
  cursorClient: MongoClient {
    _events: {},
    _eventsCount: 0,
    _maxListeners: undefined,
    [Symbol(kCapture)]: false,
    [Symbol(options)]: {
      hosts: [
        new HostAddress('mongodb:27017')
      ],
      credentials: MongoCredentials {
        username: "thib",
        password: "morb",
        source: "Testing",
        mechanism: "DEFAULT",
        mechanismProperties: {},
        equals: [Function: equals],
        resolveAuthMechanism: [Function: resolveAuthMechanism],
        validate: [Function: validate],
      },
      autoSelectFamily: true,
      compressors: [ "none" ],
      connectTimeoutMS: 30000,
      dbName: "Testing",
      directConnection: false,
      driverInfo: {},
      enableUtf8Validation: true,
      forceServerObjectId: false,
      heartbeatFrequencyMS: 10000,
      loadBalanced: false,
      localThresholdMS: 15,
      maxConnecting: 2,
      maxIdleTimeMS: 0,
      maxPoolSize: 100,
      minPoolSize: 0,
      minHeartbeatFrequencyMS: 500,
      monitorCommands: false,
      noDelay: true,
      pkFactory: {
        createPk: [Function: createPk],
      },
      raw: false,
      readPreference: ReadPreference {
        mode: "primary",
        tags: undefined,
        hedge: undefined,
        maxStalenessSeconds: undefined,
        minWireVersion: undefined,
        preference: [Getter],
        isValid: [Function: isValid],
        secondaryOk: [Function: secondaryOk],
        equals: [Function: equals],
        toJSON: [Function: toJSON],
      },
      retryReads: true,
      retryWrites: true,
      serverMonitoringMode: "auto",
      serverSelectionTimeoutMS: 30000,
      socketTimeoutMS: 0,
      srvMaxHosts: 0,
      srvServiceName: "mongodb",
      waitQueueTimeoutMS: 0,
      zlibCompressionLevel: 0,
      userSpecifiedAuthSource: false,
      userSpecifiedReplicaSet: false,
      [Symbol(@@mdb.enableMongoLogger)]: false,
      mongoLoggerOptions: {
        componentSeverities: {
          command: "off",
          topology: "off",
          serverSelection: "off",
          connection: "off",
          client: "off",
          default: "off",
        },
        maxDocumentLength: 1000,
        logDestination: {
          write: [Function: fn],
        },
        logDestinationIsStdErr: true,
      },
      metadata: {
        driver: {
          name: "nodejs",
          version: "6.9.0",
        },
        platform: "Bun v1.1.31, LE",
        os: {
          name: "linux",
          architecture: "x64",
          version: "6.6.54",
          type: "Linux",
        },
      },
      extendedMetadata: Promise { <resolved> },
    },
    mongoLogger: undefined,
    s: {
      url: "mongodb://thib:morb@mongodb:27017/Testing",
      bsonOptions: {
        raw: false,
        useBigInt64: false,
        promoteLongs: true,
        promoteValues: true,
        promoteBuffers: false,
        ignoreUndefined: false,
        bsonRegExp: false,
        serializeFunctions: false,
        fieldsAsRaw: {},
        enableUtf8Validation: true,
      },
      namespace: MongoDBNamespace {
        db: "admin",
        collection: undefined,
        toString: [Function: toString],
        withCollection: [Function: withCollection],
      },
      hasBeenClosed: false,
      sessionPool: ServerSessionPool {
        client: [Circular],
        sessions: List {
          count: 0,
          head: {
            next: [Circular],
            prev: [Circular],
            value: null,
          },
          length: [Getter],
          toArray: [Function: toArray],
          toString: [Function: toString],
          nodes: [GeneratorFunction: nodes],
          push: [Function: push],
          pushMany: [Function: pushMany],
          unshift: [Function: unshift],
          remove: [Function: remove],
          shift: [Function: shift],
          pop: [Function: pop],
          prune: [Function: prune],
          clear: [Function: clear],
          first: [Function: first],
          last: [Function: last],
          [Symbol(Symbol.iterator)]: [GeneratorFunction: GeneratorFunction],
        },
        acquire: [Function: acquire],
        release: [Function: release],
      },
      activeSessions:       Set(1) {
        ClientSession {
          _events: {
            ended: [
              [Function: onceWrapper]
            ],
          },
          _eventsCount: 1,
          _maxListeners: undefined,
          [Symbol(kCapture)]: false,
          [Symbol(snapshotEnabled)]: false,
          client: [Circular],
          sessionPool: ServerSessionPool {
            client: [Circular],
            sessions: List {
              count: 0,
              head: {
                next: [Circular],
                prev: [Circular],
                value: null,
              },
              length: [Getter],
              toArray: [Function: toArray],
              toString: [Function: toString],
              nodes: [GeneratorFunction: nodes],
              push: [Function: push],
              pushMany: [Function: pushMany],
              unshift: [Function: unshift],
              remove: [Function: remove],
              shift: [Function: shift],
              pop: [Function: pop],
              prune: [Function: prune],
              clear: [Function: clear],
              first: [Function: first],
              last: [Function: last],
              [Symbol(Symbol.iterator)]: [GeneratorFunction: GeneratorFunction],
            },
            acquire: [Function: acquire],
            release: [Function: release],
          },
          hasEnded: false,
          clientOptions: {
            hosts: [
              new HostAddress('mongodb:27017')
            ],
            credentials: MongoCredentials {
              username: "thib",
              password: "morb",
              source: "Testing",
              mechanism: "DEFAULT",
              mechanismProperties: {},
              equals: [Function: equals],
              resolveAuthMechanism: [Function: resolveAuthMechanism],
              validate: [Function: validate],
            },
            autoSelectFamily: true,
            compressors: [ "none" ],
            connectTimeoutMS: 30000,
            dbName: "Testing",
            directConnection: false,
            driverInfo: {},
            enableUtf8Validation: true,
            forceServerObjectId: false,
            heartbeatFrequencyMS: 10000,
            loadBalanced: false,
            localThresholdMS: 15,
            maxConnecting: 2,
            maxIdleTimeMS: 0,
            maxPoolSize: 100,
            minPoolSize: 0,
            minHeartbeatFrequencyMS: 500,
            monitorCommands: false,
            noDelay: true,
            pkFactory: {
              createPk: [Function: createPk],
            },
            raw: false,
            readPreference: ReadPreference {
              mode: "primary",
              tags: undefined,
              hedge: undefined,
              maxStalenessSeconds: undefined,
              minWireVersion: undefined,
              preference: [Getter],
              isValid: [Function: isValid],
              secondaryOk: [Function: secondaryOk],
              equals: [Function: equals],
              toJSON: [Function: toJSON],
            },
            retryReads: true,
            retryWrites: true,
            serverMonitoringMode: "auto",
            serverSelectionTimeoutMS: 30000,
            socketTimeoutMS: 0,
            srvMaxHosts: 0,
            srvServiceName: "mongodb",
            waitQueueTimeoutMS: 0,
            zlibCompressionLevel: 0,
            userSpecifiedAuthSource: false,
            userSpecifiedReplicaSet: false,
            [Symbol(@@mdb.enableMongoLogger)]: false,
            mongoLoggerOptions: {
              componentSeverities: {
                command: "off",
                topology: "off",
                serverSelection: "off",
                connection: "off",
                client: "off",
                default: "off",
              },
              maxDocumentLength: 1000,
              logDestination: {
                write: [Function: fn],
              },
              logDestinationIsStdErr: true,
            },
            metadata: {
              driver: {
                name: "nodejs",
                version: "6.9.0",
              },
              platform: "Bun v1.1.31, LE",
              os: {
                name: "linux",
                architecture: "x64",
                version: "6.6.54",
                type: "Linux",
              },
            },
            extendedMetadata: Promise { <resolved> },
          },
          timeoutMS: undefined,
          explicit: false,
          [Symbol(serverSession)]: null,
          [Symbol(txnNumberIncrement)]: 0,
          supports: {
            causalConsistency: false,
          },
          clusterTime: undefined,
          operationTime: undefined,
          owner: [Circular],
          defaultTransactionOptions: {},
          transaction: Transaction {
            state: "NO_TRANSACTION",
            options: {},
            _pinnedServer: undefined,
            _recoveryToken: undefined,
            server: [Getter],
            recoveryToken: [Getter],
            isPinned: [Getter],
            isStarting: [Getter],
            isActive: [Getter],
            isCommitted: [Getter],
            transition: [Function: transition],
            pinServer: [Function: pinServer],
            unpinServer: [Function: unpinServer],
          },
          id: [Getter],
          serverSession: [Getter],
          snapshotEnabled: [Getter],
          loadBalanced: [Getter],
          pinnedConnection: [Getter],
          pin: [Function: pin],
          unpin: [Function: unpin],
          isPinned: [Getter],
          endSession: [AsyncFunction: endSession],
          asyncDispose: [AsyncFunction: asyncDispose],
          advanceOperationTime: [Function: advanceOperationTime],
          advanceClusterTime: [Function: advanceClusterTime],
          equals: [Function: equals],
          incrementTransactionNumber: [Function: incrementTransactionNumber],
          inTransaction: [Function: inTransaction],
          startTransaction: [Function: startTransaction],
          commitTransaction: [AsyncFunction: commitTransaction],
          abortTransaction: [AsyncFunction: abortTransaction],
          toBSON: [Function: toBSON],
          withTransaction: [AsyncFunction: withTransaction],
          [Symbol(Symbol.asyncDispose)]: [AsyncFunction: asyncDispose],
          emitAndLog: [Function: emitAndLog],
          emitAndLogHeartbeat: [Function: emitAndLogHeartbeat],
          emitAndLogCommand: [Function: emitAndLogCommand],
          setMaxListeners: [Function: setMaxListeners2],
          getMaxListeners: [Function: getMaxListeners2],
          emit: [Function: emit],
          addListener: [Function: addListener],
          on: [Function: addListener],
          prependListener: [Function: prependListener],
          once: [Function: once2],
          prependOnceListener: [Function: prependOnceListener],
          removeListener: [Function: removeListener],
          off: [Function: removeListener],
          removeAllListeners: [Function: removeAllListeners],
          listeners: [Function: listeners],
          rawListeners: [Function: rawListeners],
          listenerCount: [Function: listenerCount2],
          eventNames: [Function: eventNames],
        },
},
      authProviders: MongoClientAuthProviders {
        existingProviders: Map(1) {
          "SCRAM-SHA-256": ScramSHA256 {
            cryptoMethod: "sha256",
            prepare: [AsyncFunction: prepare],
            auth: [AsyncFunction: auth],
            reauth: [AsyncFunction: reauth],
          },
        },
        getOrCreateProvider: [Function: getOrCreateProvider],
        getWorkflow: [Function: getWorkflow],
      },
      options: [Getter],
      readConcern: [Getter],
      writeConcern: [Getter],
      readPreference: [Getter],
      isMongoClient: [Getter],
    },
    topology: Topology {
      _events: {
        connectionPoolCreated: [
          [Function]
        ],
        connectionPoolReady: [
          [Function]
        ],
        connectionPoolCleared: [
          [Function]
        ],
        connectionPoolClosed: [
          [Function]
        ],
        connectionCreated: [
          [Function]
        ],
        connectionReady: [
          [Function]
        ],
        connectionClosed: [
          [Function]
        ],
        connectionCheckOutStarted: [
          [Function]
        ],
        connectionCheckOutFailed: [
          [Function]
        ],
        connectionCheckedOut: [
          [Function]
        ],
        connectionCheckedIn: [
          [Function]
        ],
        commandStarted: [
          [Function]
        ],
        commandSucceeded: [
          [Function]
        ],
        commandFailed: [
          [Function]
        ],
        serverOpening: [
          [Function]
        ],
        serverClosed: [
          [Function]
        ],
        serverDescriptionChanged: [
          [Function]
        ],
        topologyOpening: [
          [Function]
        ],
        topologyClosed: [
          [Function]
        ],
        topologyDescriptionChanged: [
          [Function]
        ],
        error: [
          [Function]
        ],
        timeout: [
          [Function]
        ],
        close: [
          [Function]
        ],
        serverHeartbeatStarted: [
          [Function]
        ],
        serverHeartbeatSucceeded: [
          [Function]
        ],
        serverHeartbeatFailed: [
          [Function]
        ],
      },
      _eventsCount: 26,
      _maxListeners: undefined,
      [Symbol(kCapture)]: false,
      client: [Circular],
      [Symbol(waitQueue)]: List {
        count: 0,
        head: {
          next: [Circular],
          prev: [Circular],
          value: null,
        },
        length: [Getter],
        toArray: [Function: toArray],
        toString: [Function: toString],
        nodes: [GeneratorFunction: nodes],
        push: [Function: push],
        pushMany: [Function: pushMany],
        unshift: [Function: unshift],
        remove: [Function: remove],
        shift: [Function: shift],
        pop: [Function: pop],
        prune: [Function: prune],
        clear: [Function: clear],
        first: [Function: first],
        last: [Function: last],
        [Symbol(Symbol.iterator)]: [GeneratorFunction: GeneratorFunction],
      },
      s: {
        id: 0,
        options: {
          hosts: [
            new HostAddress('mongodb:27017')
          ],
          credentials: MongoCredentials {
            username: "thib",
            password: "morb",
            source: "Testing",
            mechanism: "DEFAULT",
            mechanismProperties: {},
            equals: [Function: equals],
            resolveAuthMechanism: [Function: resolveAuthMechanism],
            validate: [Function: validate],
          },
          autoSelectFamily: true,
          compressors: [ "none" ],
          connectTimeoutMS: 30000,
          dbName: "Testing",
          directConnection: false,
          driverInfo: {},
          enableUtf8Validation: true,
          forceServerObjectId: false,
          heartbeatFrequencyMS: 10000,
          loadBalanced: false,
          localThresholdMS: 15,
          maxConnecting: 2,
          maxIdleTimeMS: 0,
          maxPoolSize: 100,
          minPoolSize: 0,
          minHeartbeatFrequencyMS: 500,
          monitorCommands: false,
          noDelay: true,
          pkFactory: {
            createPk: [Function: createPk],
          },
          raw: false,
          readPreference: ReadPreference {
            mode: "primary",
            tags: undefined,
            hedge: undefined,
            maxStalenessSeconds: undefined,
            minWireVersion: undefined,
            preference: [Getter],
            isValid: [Function: isValid],
            secondaryOk: [Function: secondaryOk],
            equals: [Function: equals],
            toJSON: [Function: toJSON],
          },
          retryReads: true,
          retryWrites: true,
          serverMonitoringMode: "auto",
          serverSelectionTimeoutMS: 30000,
          socketTimeoutMS: 0,
          srvMaxHosts: 0,
          srvServiceName: "mongodb",
          waitQueueTimeoutMS: 0,
          zlibCompressionLevel: 0,
          userSpecifiedAuthSource: false,
          userSpecifiedReplicaSet: false,
          [Symbol(@@mdb.enableMongoLogger)]: false,
          mongoLoggerOptions: {
            componentSeverities: {
              command: "off",
              topology: "off",
              serverSelection: "off",
              connection: "off",
              client: "off",
              default: "off",
            },
            maxDocumentLength: 1000,
            logDestination: {
              write: [Function: fn],
            },
            logDestinationIsStdErr: true,
          },
          metadata: {
            driver: {
              name: "nodejs",
              version: "6.9.0",
            },
            platform: "Bun v1.1.31, LE",
            os: {
              name: "linux",
              architecture: "x64",
              version: "6.6.54",
              type: "Linux",
            },
          },
          extendedMetadata: Promise { <resolved> },
        },
        seedlist: [
          new HostAddress('mongodb:27017')
        ],
        state: "connected",
        description: TopologyDescription {
          type: "Single",
          servers: Map(1) {
            "mongodb:27017": ServerDescription {
              address: "mongodb:27017",
              type: "Standalone",
              hosts: [],
              passives: [],
              arbiters: [],
              tags: {},
              minWireVersion: 0,
              maxWireVersion: 25,
              roundTripTime: 3,
              minRoundTripTime: 0,
              lastUpdateTime: 4069,
              lastWriteDate: 0,
              error: null,
              topologyVersion: {
                processId: new ObjectId('6712eedc53415328a5022645'),
                counter: 0,
              },
              setName: null,
              setVersion: null,
              electionId: null,
              logicalSessionTimeoutMinutes: 30,
              primary: null,
              me: null,
              $clusterTime: null,
              hostAddress: [Getter],
              allHosts: [Getter],
              isReadable: [Getter],
              isDataBearing: [Getter],
              isWritable: [Getter],
              host: [Getter],
              port: [Getter],
              equals: [Function: equals],
            },
          },
          stale: false,
          compatible: true,
          heartbeatFrequencyMS: 10000,
          localThresholdMS: 15,
          setName: null,
          maxElectionId: null,
          maxSetVersion: null,
          commonWireVersion: 0,
          logicalSessionTimeoutMinutes: 30,
          updateFromSrvPollingEvent: [Function: updateFromSrvPollingEvent],
          update: [Function: update],
          error: [Getter],
          hasKnownServers: [Getter],
          hasDataBearingServers: [Getter],
          hasServer: [Function: hasServer],
          toJSON: [Function: toJSON],
        },
        serverSelectionTimeoutMS: 30000,
        heartbeatFrequencyMS: 10000,
        minHeartbeatFrequencyMS: 500,
        servers: Map(1) {
          "mongodb:27017": Server {
            _events: {
              serverHeartbeatStarted: [
                [Function]
              ],
              serverHeartbeatSucceeded: [
                [Function]
              ],
              serverHeartbeatFailed: [
                [Function]
              ],
              commandStarted: [
                [Function]
              ],
              commandSucceeded: [
                [Function]
              ],
              commandFailed: [
                [Function]
              ],
              connectionPoolCreated: [
                [Function]
              ],
              connectionPoolReady: [
                [Function]
              ],
              connectionPoolCleared: [
                [Function]
              ],
              connectionPoolClosed: [
                [Function]
              ],
              connectionCreated: [
                [Function]
              ],
              connectionReady: [
                [Function]
              ],
              connectionClosed: [
                [Function]
              ],
              connectionCheckOutStarted: [
                [Function]
              ],
              connectionCheckOutFailed: [
                [Function]
              ],
              connectionCheckedOut: [
                [Function]
              ],
              connectionCheckedIn: [
                [Function]
              ],
              descriptionReceived: [
                [Function]
              ],
            },
            _eventsCount: 18,
            _maxListeners: undefined,
            [Symbol(kCapture)]: false,
            serverApi: undefined,
            topology: [Circular],
            pool: ConnectionPool {
              _events: {
                connectionPoolCreated: [
                  [Function]
                ],
                connectionPoolReady: [
                  [Function]
                ],
                connectionPoolCleared: [
                  [Function]
                ],
                connectionPoolClosed: [
                  [Function]
                ],
                connectionCreated: [
                  [Function]
                ],
                connectionReady: [
                  [Function]
                ],
                connectionClosed: [
                  [Function]
                ],
                connectionCheckOutStarted: [
                  [Function]
                ],
                connectionCheckOutFailed: [
                  [Function]
                ],
                connectionCheckedOut: [
                  [Function]
                ],
                connectionCheckedIn: [
                  [Function]
                ],
                commandStarted: [
                  [Function]
                ],
                commandSucceeded: [
                  [Function]
                ],
                commandFailed: [
                  [Function]
                ],
                clusterTimeReceived: [
                  [Function]
                ],
              },
              _eventsCount: 15,
              _maxListeners: undefined,
              [Symbol(kCapture)]: false,
              options: {
                connectionType: [class Connection],
                hostAddress: new HostAddress('mongodb:27017'),
                hosts: [
                  new HostAddress('mongodb:27017')
                ],
                credentials: MongoCredentials {
                  username: "thib",
                  password: "morb",
                  source: "Testing",
                  mechanism: "DEFAULT",
                  mechanismProperties: [Object ...],
                  equals: [Function: equals],
                  resolveAuthMechanism: [Function: resolveAuthMechanism],
                  validate: [Function: validate],
                },
                autoSelectFamily: true,
                compressors: [ "none" ],
                connectTimeoutMS: 30000,
                dbName: "Testing",
                directConnection: false,
                driverInfo: {},
                enableUtf8Validation: true,
                forceServerObjectId: false,
                heartbeatFrequencyMS: 10000,
                loadBalanced: false,
                localThresholdMS: 15,
                maxConnecting: 2,
                maxIdleTimeMS: 0,
                maxPoolSize: 100,
                minPoolSize: 0,
                minHeartbeatFrequencyMS: 500,
                monitorCommands: false,
                noDelay: true,
                pkFactory: {
                  createPk: [Function: createPk],
                },
                raw: false,
                readPreference: ReadPreference {
                  mode: "primary",
                  tags: undefined,
                  hedge: undefined,
                  maxStalenessSeconds: undefined,
                  minWireVersion: undefined,
                  preference: [Getter],
                  isValid: [Function: isValid],
                  secondaryOk: [Function: secondaryOk],
                  equals: [Function: equals],
                  toJSON: [Function: toJSON],
                },
                retryReads: true,
                retryWrites: true,
                serverMonitoringMode: "auto",
                serverSelectionTimeoutMS: 30000,
                socketTimeoutMS: 0,
                srvMaxHosts: 0,
                srvServiceName: "mongodb",
                waitQueueTimeoutMS: 0,
                zlibCompressionLevel: 0,
                userSpecifiedAuthSource: false,
                userSpecifiedReplicaSet: false,
                mongoLoggerOptions: {
                  componentSeverities: [Object ...],
                  maxDocumentLength: 1000,
                  logDestination: [Object ...],
                  logDestinationIsStdErr: true,
                },
                metadata: {
                  driver: [Object ...],
                  platform: "Bun v1.1.31, LE",
                  os: [Object ...],
                },
                extendedMetadata: Promise { <resolved> },
                minPoolSizeCheckFrequencyMS: 100,
                autoEncrypter: undefined,
                [Symbol(@@mdb.enableMongoLogger)]: false,
              },
              [Symbol(poolState)]: "ready",
              [Symbol(server)]: [Circular],
              [Symbol(connections)]: List {
                count: 1,
                head: {
                  next: [Object ...],
                  prev: [Object ...],
                  value: null,
                },
                length: [Getter],
                toArray: [Function: toArray],
                toString: [Function: toString],
                nodes: [GeneratorFunction: nodes],
                push: [Function: push],
                pushMany: [Function: pushMany],
                unshift: [Function: unshift],
                remove: [Function: remove],
                shift: [Function: shift],
                pop: [Function: pop],
                prune: [Function: prune],
                clear: [Function: clear],
                first: [Function: first],
                last: [Function: last],
                [Symbol(Symbol.iterator)]: [GeneratorFunction: GeneratorFunction],
              },
              [Symbol(pending)]: 0,
              [Symbol(checkedOut)]:               Set {},
              [Symbol(minPoolSizeTimer)]: undefined,
              [Symbol(generation)]: 0,
              [Symbol(serviceGenerations)]: Map {},
              [Symbol(connectionCounter)]: {},
              [Symbol(cancellationToken)]: CancellationToken {
                _events: {},
                _eventsCount: 0,
                _maxListeners: Infinity,
                [Symbol(kCapture)]: false,
                emitAndLog: [Function: emitAndLog],
                emitAndLogHeartbeat: [Function: emitAndLogHeartbeat],
                emitAndLogCommand: [Function: emitAndLogCommand],
                setMaxListeners: [Function: setMaxListeners2],
                getMaxListeners: [Function: getMaxListeners2],
                emit: [Function: emit],
                addListener: [Function: addListener],
                on: [Function: addListener],
                prependListener: [Function: prependListener],
                once: [Function: once2],
                prependOnceListener: [Function: prependOnceListener],
                removeListener: [Function: removeListener],
                off: [Function: removeListener],
                removeAllListeners: [Function: removeAllListeners],
                listeners: [Function: listeners],
                rawListeners: [Function: rawListeners],
                listenerCount: [Function: listenerCount2],
                eventNames: [Function: eventNames],
              },
              [Symbol(waitQueue)]: List {
                count: 0,
                head: {
                  next: [Circular],
                  prev: [Circular],
                  value: null,
                },
                length: [Getter],
                toArray: [Function: toArray],
                toString: [Function: toString],
                nodes: [GeneratorFunction: nodes],
                push: [Function: push],
                pushMany: [Function: pushMany],
                unshift: [Function: unshift],
                remove: [Function: remove],
                shift: [Function: shift],
                pop: [Function: pop],
                prune: [Function: prune],
                clear: [Function: clear],
                first: [Function: first],
                last: [Function: last],
                [Symbol(Symbol.iterator)]: [GeneratorFunction: GeneratorFunction],
              },
              [Symbol(metrics)]: ConnectionPoolMetrics {
                txnConnections: 0,
                cursorConnections: 0,
                otherConnections: 0,
                markPinned: [Function: markPinned],
                markUnpinned: [Function: markUnpinned],
                info: [Function: info],
                reset: [Function: reset],
              },
              [Symbol(processingWaitQueue)]: false,
              mongoLogger: undefined,
              component: "connection",
              address: [Getter],
              closed: [Getter],
              generation: [Getter],
              totalConnectionCount: [Getter],
              availableConnectionCount: [Getter],
              pendingConnectionCount: [Getter],
              currentCheckedOutCount: [Getter],
              waitQueueSize: [Getter],
              loadBalanced: [Getter],
              serviceGenerations: [Getter],
              serverError: [Getter],
              checkedOutConnections: [Getter],
              waitQueueErrorMetrics: [Function: waitQueueErrorMetrics],
              ready: [Function: ready],
              checkOut: [AsyncFunction: checkOut],
              checkIn: [Function: checkIn],
              clear: [Function: clear],
              interruptInUseConnections: [Function: interruptInUseConnections],
              close: [Function: close],
              reauthenticate: [AsyncFunction: reauthenticate],
              clearMinPoolSizeTimer: [Function: clearMinPoolSizeTimer],
              destroyConnection: [Function: destroyConnection],
              connectionIsStale: [Function: connectionIsStale],
              connectionIsIdle: [Function: connectionIsIdle],
              destroyConnectionIfPerished: [Function: destroyConnectionIfPerished],
              createConnection: [Function: createConnection],
              ensureMinPoolSize: [Function: ensureMinPoolSize],
              processWaitQueue: [Function: processWaitQueue],
              emitAndLog: [Function: emitAndLog],
              emitAndLogHeartbeat: [Function: emitAndLogHeartbeat],
              emitAndLogCommand: [Function: emitAndLogCommand],
              setMaxListeners: [Function: setMaxListeners2],
              getMaxListeners: [Function: getMaxListeners2],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once2],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount2],
              eventNames: [Function: eventNames],
            },
            s: {
              description: ServerDescription {
                address: "mongodb:27017",
                type: "Standalone",
                hosts: [],
                passives: [],
                arbiters: [],
                tags: {},
                minWireVersion: 0,
                maxWireVersion: 25,
                roundTripTime: 3,
                minRoundTripTime: 0,
                lastUpdateTime: 4069,
                lastWriteDate: 0,
                error: null,
                topologyVersion: {
                  processId: new ObjectId('6712eedc53415328a5022645'),
                  counter: 0,
                },
                setName: null,
                setVersion: null,
                electionId: null,
                logicalSessionTimeoutMinutes: 30,
                primary: null,
                me: null,
                $clusterTime: null,
                hostAddress: [Getter],
                allHosts: [Getter],
                isReadable: [Getter],
                isDataBearing: [Getter],
                isWritable: [Getter],
                host: [Getter],
                port: [Getter],
                equals: [Function: equals],
              },
              options: {
                hosts: [
                  new HostAddress('mongodb:27017')
                ],
                credentials: MongoCredentials {
                  username: "thib",
                  password: "morb",
                  source: "Testing",
                  mechanism: "DEFAULT",
                  mechanismProperties: [Object ...],
                  equals: [Function: equals],
                  resolveAuthMechanism: [Function: resolveAuthMechanism],
                  validate: [Function: validate],
                },
                autoSelectFamily: true,
                compressors: [ "none" ],
                connectTimeoutMS: 30000,
                dbName: "Testing",
                directConnection: false,
                driverInfo: {},
                enableUtf8Validation: true,
                forceServerObjectId: false,
                heartbeatFrequencyMS: 10000,
                loadBalanced: false,
                localThresholdMS: 15,
                maxConnecting: 2,
                maxIdleTimeMS: 0,
                maxPoolSize: 100,
                minPoolSize: 0,
                minHeartbeatFrequencyMS: 500,
                monitorCommands: false,
                noDelay: true,
                pkFactory: {
                  createPk: [Function: createPk],
                },
                raw: false,
                readPreference: ReadPreference {
                  mode: "primary",
                  tags: undefined,
                  hedge: undefined,
                  maxStalenessSeconds: undefined,
                  minWireVersion: undefined,
                  preference: [Getter],
                  isValid: [Function: isValid],
                  secondaryOk: [Function: secondaryOk],
                  equals: [Function: equals],
                  toJSON: [Function: toJSON],
                },
                retryReads: true,
                retryWrites: true,
                serverMonitoringMode: "auto",
                serverSelectionTimeoutMS: 30000,
                socketTimeoutMS: 0,
                srvMaxHosts: 0,
                srvServiceName: "mongodb",
                waitQueueTimeoutMS: 0,
                zlibCompressionLevel: 0,
                userSpecifiedAuthSource: false,
                userSpecifiedReplicaSet: false,
                [Symbol(@@mdb.enableMongoLogger)]: false,
                mongoLoggerOptions: {
                  componentSeverities: [Object ...],
                  maxDocumentLength: 1000,
                  logDestination: [Object ...],
                  logDestinationIsStdErr: true,
                },
                metadata: {
                  driver: [Object ...],
                  platform: "Bun v1.1.31, LE",
                  os: [Object ...],
                },
                extendedMetadata: Promise { <resolved> },
              },
              state: "connected",
              operationCount: 0,
            },
            monitor: Monitor {
              _events: {
                serverHeartbeatStarted: [
                  [Function]
                ],
                serverHeartbeatSucceeded: [
                  [Function], [Function]
                ],
                serverHeartbeatFailed: [
                  [Function]
                ],
                resetServer: [
                  [Function]
                ],
              },
              _eventsCount: 4,
              _maxListeners: undefined,
              [Symbol(kCapture)]: false,
              component: "topology",
              [Symbol(server)]: [Circular],
              connection: Connection {
                _events: {},
                _eventsCount: 0,
                _maxListeners: undefined,
                [Symbol(kCapture)]: false,
                lastHelloMS: 3,
                helloOk: true,
                delayedTimeoutId: null,
                closed: false,
                clusterTime: null,
                error: null,
                dataEvents: null,
                socket: Socket2 {
                  _readableState: [Object ...],
                  _events: [Object ...],
                  _eventsCount: 8,
                  _maxListeners: undefined,
                  [Symbol(kCapture)]: false,
                  _writableState: [Object ...],
                  allowHalfOpen: false,
                  bytesRead: 329,
                  connecting: false,
                  localAddress: "127.0.0.1",
                  remotePort: 27017,
                  [Symbol(::bunnetsocketinternal::)]: [TCPSocket ...],
                  [Symbol(::buntlsconnectoptions::)]: null,
                  timeout: 0,
                  isServer: false,
                  _handle: [Circular],
                  _parent: [Circular],
                  _parentWrap: [Circular],
                  server: undefined,
                  pauseOnConnect: undefined,
                  servername: undefined,
                  bytesWritten: [Getter],
                  address: [Function: address],
                  bufferSize: [Getter],
                  connect: [Function: connect],
                  _destroy: [Function: _destroy],
                  _final: [Function: _final],
                  localFamily: [Getter],
                  localPort: [Getter],
                  pending: [Getter],
                  _read: [Function: _read],
                  readyState: [Getter],
                  ref: [Function: ref],
                  remoteAddress: [Getter],
                  remoteFamily: [Getter],
                  resetAndDestroy: [Function: resetAndDestroy],
                  setKeepAlive: [Function: setKeepAlive],
                  setNoDelay: [Function: setNoDelay],
                  setTimeout: [Function: setTimeout],
                  unref: [Function: unref],
                  destroySoon: [Function: destroySoon],
                  _write: [Function: _write],
                  write: [Function],
                  cork: [Function],
                  uncork: [Function],
                  setDefaultEncoding: [Function: setDefaultEncoding],
                  _writev: null,
                  end: [Function],
                  writable: [Getter/Setter],
                  writableHighWaterMark: [Getter],
                  writableObjectMode: [Getter],
                  writableBuffer: [Getter],
                  writableLength: [Getter],
                  writableFinished: [Getter],
                  writableCorked: [Getter],
                  writableEnded: [Getter],
                  writableNeedDrain: [Getter],
                  destroyed: [Getter/Setter],
                  on: [Function],
                  destroy: [Function: destroy2],
                  _undestroy: [Function: undestroy],
                  push: [Function],
                  unshift: [Function],
                  isPaused: [Function],
                  setEncoding: [Function],
                  read: [Function],
                  pipe: [Function],
                  unpipe: [Function],
                  addListener: [Function],
                  removeListener: [Function],
                  off: [Function],
                  removeAllListeners: [Function],
                  resume: [Function],
                  pause: [Function],
                  wrap: [Function],
                  iterator: [Function],
                  readable: [Getter/Setter],
                  readableDidRead: [Getter],
                  readableAborted: [Getter],
                  readableHighWaterMark: [Getter],
                  readableBuffer: [Getter],
                  readableFlowing: [Getter/Setter],
                  readableLength: [Getter],
                  readableObjectMode: [Getter],
                  readableEncoding: [Getter],
                  errored: [Getter],
                  closed: [Getter],
                  readableEnded: [Getter],
                  asIndexedPairs: [Function],
                  drop: [Function],
                  filter: [Function],
                  flatMap: [Function],
                  map: [Function],
                  take: [Function],
                  every: [Function],
                  forEach: [Function],
                  reduce: [Function],
                  toArray: [Function],
                  some: [Function],
                  find: [Function],
                  [Symbol(nodejs.rejection)]: [Function],
                  [Symbol(Symbol.asyncIterator)]: [Function],
                },
                id: "<monitor>",
                address: "172.18.0.2:27017",
                socketTimeoutMS: 0,
                monitorCommands: false,
                serverApi: undefined,
                mongoLogger: undefined,
                established: true,
                description: StreamDescription {
                  hello: [Object ...],
                  address: "172.18.0.2:27017",
                  type: "Standalone",
                  minWireVersion: 0,
                  maxWireVersion: 25,
                  maxBsonObjectSize: 16777216,
                  maxMessageSizeBytes: 48000000,
                  maxWriteBatchSize: 100000,
                  logicalSessionTimeoutMinutes: 30,
                  loadBalanced: false,
                  compressors: [ "none" ],
                  serverConnectionId: 1n,
                  receiveResponse: [Function: receiveResponse],
                  parseServerConnectionID: [Function: parseServerConnectionID],
                },
                generation: 0,
                lastUseTime: 4065,
                messageStream: SizedMessageTransform {
                  _readableState: [Object ...],
                  _events: [Object ...],
                  _eventsCount: 5,
                  _maxListeners: undefined,
                  [Symbol(kCapture)]: false,
                  _writableState: [Object ...],
                  allowHalfOpen: true,
                  [Symbol(kCallback)]: null,
                  bufferPool: [Object ...],
                  connection: [Circular],
                  _transform: [Function: _transform],
                  _final: [Function: final],
                  _write: [Function],
                  _read: [Function],
                  write: [Function],
                  cork: [Function],
                  uncork: [Function],
                  setDefaultEncoding: [Function: setDefaultEncoding],
                  _writev: null,
                  end: [Function],
                  writable: [Getter/Setter],
                  writableHighWaterMark: [Getter],
                  writableObjectMode: [Getter],
                  writableBuffer: [Getter],
                  writableLength: [Getter],
                  writableFinished: [Getter],
                  writableCorked: [Getter],
                  writableEnded: [Getter],
                  writableNeedDrain: [Getter],
                  destroyed: [Getter/Setter],
                  on: [Function],
                  destroy: [Function: destroy2],
                  _undestroy: [Function: undestroy],
                  _destroy: [Function],
                  push: [Function],
                  unshift: [Function],
                  isPaused: [Function],
                  setEncoding: [Function],
                  read: [Function],
                  pipe: [Function],
                  unpipe: [Function],
                  addListener: [Function],
                  removeListener: [Function],
                  off: [Function],
                  removeAllListeners: [Function],
                  resume: [Function],
                  pause: [Function],
                  wrap: [Function],
                  iterator: [Function],
                  readable: [Getter/Setter],
                  readableDidRead: [Getter],
                  readableAborted: [Getter],
                  readableHighWaterMark: [Getter],
                  readableBuffer: [Getter],
                  readableFlowing: [Getter/Setter],
                  readableLength: [Getter],
                  readableObjectMode: [Getter],
                  readableEncoding: [Getter],
                  errored: [Getter],
                  closed: [Getter],
                  readableEnded: [Getter],
                  asIndexedPairs: [Function],
                  drop: [Function],
                  filter: [Function],
                  flatMap: [Function],
                  map: [Function],
                  take: [Function],
                  every: [Function],
                  forEach: [Function],
                  reduce: [Function],
                  toArray: [Function],
                  some: [Function],
                  find: [Function],
                  [Symbol(nodejs.rejection)]: [Function],
                  [Symbol(Symbol.asyncIterator)]: [Function],
                },
                authContext: AuthContext {
                  reauthenticating: false,
                  connection: [Circular],
                  credentials: undefined,
                  options: [Object ...],
                },
                hello: [Getter/Setter],
                serviceId: [Getter],
                loadBalanced: [Getter],
                idleTime: [Getter],
                hasSessionSupport: [Getter],
                supportsOpMsg: [Getter],
                shouldEmitAndLogCommand: [Getter],
                markAvailable: [Function: markAvailable],
                onError: [Function: onError],
                onClose: [Function: onClose],
                onTimeout: [Function: onTimeout],
                destroy: [Function: destroy],
                cleanup: [Function: cleanup],
                prepareCommand: [Function: prepareCommand],
                sendWire: [AsyncGeneratorFunction: sendWire],
                sendCommand: [AsyncGeneratorFunction: sendCommand],
                command: [AsyncFunction: command],
                exhaustCommand: [Function: exhaustCommand],
                throwIfAborted: [Function: throwIfAborted],
                writeCommand: [AsyncFunction: writeCommand],
                readMany: [AsyncGeneratorFunction: readMany],
                emitAndLog: [Function: emitAndLog],
                emitAndLogHeartbeat: [Function: emitAndLogHeartbeat],
                emitAndLogCommand: [Function: emitAndLogCommand],
                setMaxListeners: [Function: setMaxListeners2],
                getMaxListeners: [Function: getMaxListeners2],
                emit: [Function: emit],
                addListener: [Function: addListener],
                on: [Function: addListener],
                prependListener: [Function: prependListener],
                once: [Function: once2],
                prependOnceListener: [Function: prependOnceListener],
                removeListener: [Function: removeListener],
                off: [Function: removeListener],
                removeAllListeners: [Function: removeAllListeners],
                listeners: [Function: listeners],
                rawListeners: [Function: rawListeners],
                listenerCount: [Function: listenerCount2],
                eventNames: [Function: eventNames],
              },
              [Symbol(cancellationToken)]: CancellationToken {
                _events: {},
                _eventsCount: 0,
                _maxListeners: Infinity,
                [Symbol(kCapture)]: false,
                emitAndLog: [Function: emitAndLog],
                emitAndLogHeartbeat: [Function: emitAndLogHeartbeat],
                emitAndLogCommand: [Function: emitAndLogCommand],
                setMaxListeners: [Function: setMaxListeners2],
                getMaxListeners: [Function: getMaxListeners2],
                emit: [Function: emit],
                addListener: [Function: addListener],
                on: [Function: addListener],
                prependListener: [Function: prependListener],
                once: [Function: once2],
                prependOnceListener: [Function: prependOnceListener],
                removeListener: [Function: removeListener],
                off: [Function: removeListener],
                removeAllListeners: [Function: removeAllListeners],
                listeners: [Function: listeners],
                rawListeners: [Function: rawListeners],
                listenerCount: [Function: listenerCount2],
                eventNames: [Function: eventNames],
              },
              [Symbol(monitorId)]: MonitorInterval {
                isExpeditedCallToFnScheduled: true,
                stopped: false,
                isExecutionInProgress: false,
                hasExecutedOnce: false,
                _executeAndReschedule: [Function],
                fn: [Function],
                lastExecutionEnded: 4070,
                heartbeatFrequencyMS: 10000,
                minHeartbeatFrequencyMS: 500,
                timerId: Timeout (#4),
                wake: [Function: wake],
                stop: [Function: stop],
                toString: [Function: toString],
                toJSON: [Function: toJSON],
                _reschedule: [Function: _reschedule],
              },
              s: {
                state: "idle",
              },
              address: "mongodb:27017",
              options: {
                connectTimeoutMS: 30000,
                heartbeatFrequencyMS: 10000,
                minHeartbeatFrequencyMS: 500,
                serverMonitoringMode: "auto",
              },
              isRunningInFaasEnv: false,
              mongoLogger: undefined,
              rttSampler: RTTSampler {
                rttSamples: Float64Array(10) [ 3, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
                length: 1,
                writeIndex: 1,
                addSample: [Function: addSample],
                min: [Function: min],
                average: [Function: average],
                last: [Getter],
                clear: [Function: clear],
              },
              connectOptions: {
                id: "<monitor>",
                generation: 0,
                cancellationToken: CancellationToken {
                  _events: [Object ...],
                  _eventsCount: 0,
                  _maxListeners: Infinity,
                  [Symbol(kCapture)]: false,
                  emitAndLog: [Function: emitAndLog],
                  emitAndLogHeartbeat: [Function: emitAndLogHeartbeat],
                  emitAndLogCommand: [Function: emitAndLogCommand],
                  setMaxListeners: [Function: setMaxListeners2],
                  getMaxListeners: [Function: getMaxListeners2],
                  emit: [Function: emit],
                  addListener: [Function: addListener],
                  on: [Function: addListener],
                  prependListener: [Function: prependListener],
                  once: [Function: once2],
                  prependOnceListener: [Function: prependOnceListener],
                  removeListener: [Function: removeListener],
                  off: [Function: removeListener],
                  removeAllListeners: [Function: removeAllListeners],
                  listeners: [Function: listeners],
                  rawListeners: [Function: rawListeners],
                  listenerCount: [Function: listenerCount2],
                  eventNames: [Function: eventNames],
                },
                hostAddress: new HostAddress('mongodb:27017'),
                hosts: [
                  new HostAddress('mongodb:27017')
                ],
                autoSelectFamily: true,
                compressors: [ "none" ],
                connectTimeoutMS: 30000,
                dbName: "Testing",
                directConnection: false,
                driverInfo: {},
                enableUtf8Validation: true,
                forceServerObjectId: false,
                heartbeatFrequencyMS: 10000,
                loadBalanced: false,
                localThresholdMS: 15,
                maxConnecting: 2,
                maxIdleTimeMS: 0,
                maxPoolSize: 100,
                minPoolSize: 0,
                minHeartbeatFrequencyMS: 500,
                monitorCommands: false,
                noDelay: true,
                pkFactory: {
                  createPk: [Function: createPk],
                },
                raw: false,
                readPreference: ReadPreference {
                  mode: "primary",
                  tags: undefined,
                  hedge: undefined,
                  maxStalenessSeconds: undefined,
                  minWireVersion: undefined,
                  preference: [Getter],
                  isValid: [Function: isValid],
                  secondaryOk: [Function: secondaryOk],
                  equals: [Function: equals],
                  toJSON: [Function: toJSON],
                },
                retryReads: true,
                retryWrites: true,
                serverMonitoringMode: "auto",
                serverSelectionTimeoutMS: 30000,
                socketTimeoutMS: 0,
                srvMaxHosts: 0,
                srvServiceName: "mongodb",
                waitQueueTimeoutMS: 0,
                zlibCompressionLevel: 0,
                userSpecifiedAuthSource: false,
                userSpecifiedReplicaSet: false,
                mongoLoggerOptions: {
                  componentSeverities: [Object ...],
                  maxDocumentLength: 1000,
                  logDestination: [Object ...],
                  logDestinationIsStdErr: true,
                },
                metadata: {
                  driver: [Object ...],
                  platform: "Bun v1.1.31, LE",
                  os: [Object ...],
                },
                extendedMetadata: Promise { <resolved> },
                useBigInt64: false,
                promoteLongs: true,
                promoteValues: true,
                promoteBuffers: true,
                [Symbol(@@mdb.enableMongoLogger)]: false,
              },
              connect: [Function: connect],
              requestCheck: [Function: requestCheck],
              reset: [Function: reset],
              close: [Function: close],
              roundTripTime: [Getter],
              minRoundTripTime: [Getter],
              latestRtt: [Getter],
              addRttSample: [Function: addRttSample],
              clearRttSamples: [Function: clearRttSamples],
              emitAndLog: [Function: emitAndLog],
              emitAndLogHeartbeat: [Function: emitAndLogHeartbeat],
              emitAndLogCommand: [Function: emitAndLogCommand],
              setMaxListeners: [Function: setMaxListeners2],
              getMaxListeners: [Function: getMaxListeners2],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once2],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount2],
              eventNames: [Function: eventNames],
            },
            clusterTime: [Getter/Setter],
            description: [Getter],
            name: [Getter],
            autoEncrypter: [Getter],
            loadBalanced: [Getter],
            connect: [Function: connect],
            destroy: [Function: destroy],
            requestCheck: [Function: requestCheck],
            command: [AsyncFunction: command],
            handleError: [Function: handleError],
            decorateCommandError: [Function: decorateCommandError],
            decrementOperationCount: [Function: decrementOperationCount],
            incrementOperationCount: [Function: incrementOperationCount],
            emitAndLog: [Function: emitAndLog],
            emitAndLogHeartbeat: [Function: emitAndLogHeartbeat],
            emitAndLogCommand: [Function: emitAndLogCommand],
            setMaxListeners: [Function: setMaxListeners2],
            getMaxListeners: [Function: getMaxListeners2],
            emit: [Function: emit],
            addListener: [Function: addListener],
            on: [Function: addListener],
            prependListener: [Function: prependListener],
            once: [Function: once2],
            prependOnceListener: [Function: prependOnceListener],
            removeListener: [Function: removeListener],
            off: [Function: removeListener],
            removeAllListeners: [Function: removeAllListeners],
            listeners: [Function: listeners],
            rawListeners: [Function: rawListeners],
            listenerCount: [Function: listenerCount2],
            eventNames: [Function: eventNames],
          },
        },
        credentials: MongoCredentials {
          username: "thib",
          password: "morb",
          source: "Testing",
          mechanism: "DEFAULT",
          mechanismProperties: {},
          equals: [Function: equals],
          resolveAuthMechanism: [Function: resolveAuthMechanism],
          validate: [Function: validate],
        },
        clusterTime: undefined,
        connectionTimers:         Set {},
        detectShardedTopology: [Function: detectShardedTopology],
        detectSrvRecords: [Function: detectSrvRecords],
      },
      mongoLogger: undefined,
      component: "topology",
      connectionLock: undefined,
      detectShardedTopology: [Function: detectShardedTopology],
      detectSrvRecords: [Function: detectSrvRecords],
      description: [Getter],
      loadBalanced: [Getter],
      serverApi: [Getter],
      capabilities: [Getter],
      connect: [AsyncFunction: connect],
      _connect: [AsyncFunction: _connect],
      close: [Function: close],
      selectServer: [AsyncFunction: selectServer],
      serverUpdateHandler: [Function: serverUpdateHandler],
      auth: [Function: auth],
      clientMetadata: [Getter],
      isConnected: [Function: isConnected],
      isDestroyed: [Function: isDestroyed],
      lastHello: [Function: lastHello],
      commonWireVersion: [Getter],
      logicalSessionTimeoutMinutes: [Getter],
      clusterTime: [Getter/Setter],
      emitAndLog: [Function: emitAndLog],
      emitAndLogHeartbeat: [Function: emitAndLogHeartbeat],
      emitAndLogCommand: [Function: emitAndLogCommand],
      setMaxListeners: [Function: setMaxListeners2],
      getMaxListeners: [Function: getMaxListeners2],
      emit: [Function: emit],
      addListener: [Function: addListener],
      on: [Function: addListener],
      prependListener: [Function: prependListener],
      once: [Function: once2],
      prependOnceListener: [Function: prependOnceListener],
      removeListener: [Function: removeListener],
      off: [Function: removeListener],
      removeAllListeners: [Function: removeAllListeners],
      listeners: [Function: listeners],
      rawListeners: [Function: rawListeners],
      listenerCount: [Function: listenerCount2],
      eventNames: [Function: eventNames],
    },
    connectionLock: undefined,
    asyncDispose: [AsyncFunction: asyncDispose],
    checkForNonGenuineHosts: [Function: checkForNonGenuineHosts],
    options: [Getter],
    serverApi: [Getter],
    monitorCommands: [Getter/Setter],
    autoEncrypter: [Getter],
    readConcern: [Getter],
    writeConcern: [Getter],
    readPreference: [Getter],
    bsonOptions: [Getter],
    connect: [AsyncFunction: connect],
    _connect: [AsyncFunction: _connect],
    close: [AsyncFunction: close],
    db: [Function: db],
    startSession: [Function: startSession],
    withSession: [AsyncFunction: withSession],
    watch: [Function: watch],
    [Symbol(Symbol.asyncDispose)]: [AsyncFunction: asyncDispose],
    emitAndLog: [Function: emitAndLog],
    emitAndLogHeartbeat: [Function: emitAndLogHeartbeat],
    emitAndLogCommand: [Function: emitAndLogCommand],
    setMaxListeners: [Function: setMaxListeners2],
    getMaxListeners: [Function: getMaxListeners2],
    emit: [Function: emit],
    addListener: [Function: addListener],
    on: [Function: addListener],
    prependListener: [Function: prependListener],
    once: [Function: once2],
    prependOnceListener: [Function: prependOnceListener],
    removeListener: [Function: removeListener],
    off: [Function: removeListener],
    removeAllListeners: [Function: removeAllListeners],
    listeners: [Function: listeners],
    rawListeners: [Function: rawListeners],
    listenerCount: [Function: listenerCount2],
    eventNames: [Function: eventNames],
  },
  cursorNamespace: MongoDBCollectionNamespace {
    db: "Testing",
    collection: "comments",
    toString: [Function: toString],
    withCollection: [Function: withCollection],
  },
  cursorId: null,
  initialized: false,
  isClosed: false,
  isKilled: false,
  cursorOptions: {
    readPreference: ReadPreference {
      mode: "primary",
      tags: undefined,
      hedge: undefined,
      maxStalenessSeconds: undefined,
      minWireVersion: undefined,
      preference: [Getter],
      isValid: [Function: isValid],
      secondaryOk: [Function: secondaryOk],
      equals: [Function: equals],
      toJSON: [Function: toJSON],
    },
    fieldsAsRaw: {},
    useBigInt64: false,
    promoteValues: true,
    promoteBuffers: false,
    promoteLongs: true,
    serializeFunctions: false,
    ignoreUndefined: false,
    bsonRegExp: false,
    raw: false,
    enableUtf8Validation: true,
    timeoutMS: undefined,
  },
  cursorSession: ClientSession {
    _events: {
      ended: [
        [Function: onceWrapper]
      ],
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    [Symbol(kCapture)]: false,
    [Symbol(snapshotEnabled)]: false,
    client: MongoClient {
      _events: {},
      _eventsCount: 0,
      _maxListeners: undefined,
      [Symbol(kCapture)]: false,
      [Symbol(options)]: {
        hosts: [
          new HostAddress('mongodb:27017')
        ],
        credentials: MongoCredentials {
          username: "thib",
          password: "morb",
          source: "Testing",
          mechanism: "DEFAULT",
          mechanismProperties: {},
          equals: [Function: equals],
          resolveAuthMechanism: [Function: resolveAuthMechanism],
          validate: [Function: validate],
        },
        autoSelectFamily: true,
        compressors: [ "none" ],
        connectTimeoutMS: 30000,
        dbName: "Testing",
        directConnection: false,
        driverInfo: {},
        enableUtf8Validation: true,
        forceServerObjectId: false,
        heartbeatFrequencyMS: 10000,
        loadBalanced: false,
        localThresholdMS: 15,
        maxConnecting: 2,
        maxIdleTimeMS: 0,
        maxPoolSize: 100,
        minPoolSize: 0,
        minHeartbeatFrequencyMS: 500,
        monitorCommands: false,
        noDelay: true,
        pkFactory: {
          createPk: [Function: createPk],
        },
        raw: false,
        readPreference: ReadPreference {
          mode: "primary",
          tags: undefined,
          hedge: undefined,
          maxStalenessSeconds: undefined,
          minWireVersion: undefined,
          preference: [Getter],
          isValid: [Function: isValid],
          secondaryOk: [Function: secondaryOk],
          equals: [Function: equals],
          toJSON: [Function: toJSON],
        },
        retryReads: true,
        retryWrites: true,
        serverMonitoringMode: "auto",
        serverSelectionTimeoutMS: 30000,
        socketTimeoutMS: 0,
        srvMaxHosts: 0,
        srvServiceName: "mongodb",
        waitQueueTimeoutMS: 0,
        zlibCompressionLevel: 0,
        userSpecifiedAuthSource: false,
        userSpecifiedReplicaSet: false,
        [Symbol(@@mdb.enableMongoLogger)]: false,
        mongoLoggerOptions: {
          componentSeverities: {
            command: "off",
            topology: "off",
            serverSelection: "off",
            connection: "off",
            client: "off",
            default: "off",
          },
          maxDocumentLength: 1000,
          logDestination: {
            write: [Function: fn],
          },
          logDestinationIsStdErr: true,
        },
        metadata: {
          driver: {
            name: "nodejs",
            version: "6.9.0",
          },
          platform: "Bun v1.1.31, LE",
          os: {
            name: "linux",
            architecture: "x64",
            version: "6.6.54",
            type: "Linux",
          },
        },
        extendedMetadata: Promise { <resolved> },
      },
      mongoLogger: undefined,
      s: {
        url: "mongodb://thib:morb@mongodb:27017/Testing",
        bsonOptions: {
          raw: false,
          useBigInt64: false,
          promoteLongs: true,
          promoteValues: true,
          promoteBuffers: false,
          ignoreUndefined: false,
          bsonRegExp: false,
          serializeFunctions: false,
          fieldsAsRaw: {},
          enableUtf8Validation: true,
        },
        namespace: MongoDBNamespace {
          db: "admin",
          collection: undefined,
          toString: [Function: toString],
          withCollection: [Function: withCollection],
        },
        hasBeenClosed: false,
        sessionPool: ServerSessionPool {
          client: [Circular],
          sessions: List {
            count: 0,
            head: {
              next: [Circular],
              prev: [Circular],
              value: null,
            },
            length: [Getter],
            toArray: [Function: toArray],
            toString: [Function: toString],
            nodes: [GeneratorFunction: nodes],
            push: [Function: push],
            pushMany: [Function: pushMany],
            unshift: [Function: unshift],
            remove: [Function: remove],
            shift: [Function: shift],
            pop: [Function: pop],
            prune: [Function: prune],
            clear: [Function: clear],
            first: [Function: first],
            last: [Function: last],
            [Symbol(Symbol.iterator)]: [GeneratorFunction: GeneratorFunction],
          },
          acquire: [Function: acquire],
          release: [Function: release],
        },
        activeSessions:         Set(1) {
          [Circular],
},
        authProviders: MongoClientAuthProviders {
          existingProviders: Map(1) {
            "SCRAM-SHA-256": ScramSHA256 {
              cryptoMethod: "sha256",
              prepare: [AsyncFunction: prepare],
              auth: [AsyncFunction: auth],
              reauth: [AsyncFunction: reauth],
            },
          },
          getOrCreateProvider: [Function: getOrCreateProvider],
          getWorkflow: [Function: getWorkflow],
        },
        options: [Getter],
        readConcern: [Getter],
        writeConcern: [Getter],
        readPreference: [Getter],
        isMongoClient: [Getter],
      },
      topology: Topology {
        _events: {
          connectionPoolCreated: [
            [Function]
          ],
          connectionPoolReady: [
            [Function]
          ],
          connectionPoolCleared: [
            [Function]
          ],
          connectionPoolClosed: [
            [Function]
          ],
          connectionCreated: [
            [Function]
          ],
          connectionReady: [
            [Function]
          ],
          connectionClosed: [
            [Function]
          ],
          connectionCheckOutStarted: [
            [Function]
          ],
          connectionCheckOutFailed: [
            [Function]
          ],
          connectionCheckedOut: [
            [Function]
          ],
          connectionCheckedIn: [
            [Function]
          ],
          commandStarted: [
            [Function]
          ],
          commandSucceeded: [
            [Function]
          ],
          commandFailed: [
            [Function]
          ],
          serverOpening: [
            [Function]
          ],
          serverClosed: [
            [Function]
          ],
          serverDescriptionChanged: [
            [Function]
          ],
          topologyOpening: [
            [Function]
          ],
          topologyClosed: [
            [Function]
          ],
          topologyDescriptionChanged: [
            [Function]
          ],
          error: [
            [Function]
          ],
          timeout: [
            [Function]
          ],
          close: [
            [Function]
          ],
          serverHeartbeatStarted: [
            [Function]
          ],
          serverHeartbeatSucceeded: [
            [Function]
          ],
          serverHeartbeatFailed: [
            [Function]
          ],
        },
        _eventsCount: 26,
        _maxListeners: undefined,
        [Symbol(kCapture)]: false,
        client: [Circular],
        [Symbol(waitQueue)]: List {
          count: 0,
          head: {
            next: [Circular],
            prev: [Circular],
            value: null,
          },
          length: [Getter],
          toArray: [Function: toArray],
          toString: [Function: toString],
          nodes: [GeneratorFunction: nodes],
          push: [Function: push],
          pushMany: [Function: pushMany],
          unshift: [Function: unshift],
          remove: [Function: remove],
          shift: [Function: shift],
          pop: [Function: pop],
          prune: [Function: prune],
          clear: [Function: clear],
          first: [Function: first],
          last: [Function: last],
          [Symbol(Symbol.iterator)]: [GeneratorFunction: GeneratorFunction],
        },
        s: {
          id: 0,
          options: {
            hosts: [
              new HostAddress('mongodb:27017')
            ],
            credentials: MongoCredentials {
              username: "thib",
              password: "morb",
              source: "Testing",
              mechanism: "DEFAULT",
              mechanismProperties: {},
              equals: [Function: equals],
              resolveAuthMechanism: [Function: resolveAuthMechanism],
              validate: [Function: validate],
            },
            autoSelectFamily: true,
            compressors: [ "none" ],
            connectTimeoutMS: 30000,
            dbName: "Testing",
            directConnection: false,
            driverInfo: {},
            enableUtf8Validation: true,
            forceServerObjectId: false,
            heartbeatFrequencyMS: 10000,
            loadBalanced: false,
            localThresholdMS: 15,
            maxConnecting: 2,
            maxIdleTimeMS: 0,
            maxPoolSize: 100,
            minPoolSize: 0,
            minHeartbeatFrequencyMS: 500,
            monitorCommands: false,
            noDelay: true,
            pkFactory: {
              createPk: [Function: createPk],
            },
            raw: false,
            readPreference: ReadPreference {
              mode: "primary",
              tags: undefined,
              hedge: undefined,
              maxStalenessSeconds: undefined,
              minWireVersion: undefined,
              preference: [Getter],
              isValid: [Function: isValid],
              secondaryOk: [Function: secondaryOk],
              equals: [Function: equals],
              toJSON: [Function: toJSON],
            },
            retryReads: true,
            retryWrites: true,
            serverMonitoringMode: "auto",
            serverSelectionTimeoutMS: 30000,
            socketTimeoutMS: 0,
            srvMaxHosts: 0,
            srvServiceName: "mongodb",
            waitQueueTimeoutMS: 0,
            zlibCompressionLevel: 0,
            userSpecifiedAuthSource: false,
            userSpecifiedReplicaSet: false,
            [Symbol(@@mdb.enableMongoLogger)]: false,
            mongoLoggerOptions: {
              componentSeverities: {
                command: "off",
                topology: "off",
                serverSelection: "off",
                connection: "off",
                client: "off",
                default: "off",
              },
              maxDocumentLength: 1000,
              logDestination: {
                write: [Function: fn],
              },
              logDestinationIsStdErr: true,
            },
            metadata: {
              driver: {
                name: "nodejs",
                version: "6.9.0",
              },
              platform: "Bun v1.1.31, LE",
              os: {
                name: "linux",
                architecture: "x64",
                version: "6.6.54",
                type: "Linux",
              },
            },
            extendedMetadata: Promise { <resolved> },
          },
          seedlist: [
            new HostAddress('mongodb:27017')
          ],
          state: "connected",
          description: TopologyDescription {
            type: "Single",
            servers: Map(1) {
              "mongodb:27017": ServerDescription {
                address: "mongodb:27017",
                type: "Standalone",
                hosts: [],
                passives: [],
                arbiters: [],
                tags: {},
                minWireVersion: 0,
                maxWireVersion: 25,
                roundTripTime: 3,
                minRoundTripTime: 0,
                lastUpdateTime: 4069,
                lastWriteDate: 0,
                error: null,
                topologyVersion: {
                  processId: new ObjectId('6712eedc53415328a5022645'),
                  counter: 0,
                },
                setName: null,
                setVersion: null,
                electionId: null,
                logicalSessionTimeoutMinutes: 30,
                primary: null,
                me: null,
                $clusterTime: null,
                hostAddress: [Getter],
                allHosts: [Getter],
                isReadable: [Getter],
                isDataBearing: [Getter],
                isWritable: [Getter],
                host: [Getter],
                port: [Getter],
                equals: [Function: equals],
              },
            },
            stale: false,
            compatible: true,
            heartbeatFrequencyMS: 10000,
            localThresholdMS: 15,
            setName: null,
            maxElectionId: null,
            maxSetVersion: null,
            commonWireVersion: 0,
            logicalSessionTimeoutMinutes: 30,
            updateFromSrvPollingEvent: [Function: updateFromSrvPollingEvent],
            update: [Function: update],
            error: [Getter],
            hasKnownServers: [Getter],
            hasDataBearingServers: [Getter],
            hasServer: [Function: hasServer],
            toJSON: [Function: toJSON],
          },
          serverSelectionTimeoutMS: 30000,
          heartbeatFrequencyMS: 10000,
          minHeartbeatFrequencyMS: 500,
          servers: Map(1) {
            "mongodb:27017": Server {
              _events: {
                serverHeartbeatStarted: [
                  [Function]
                ],
                serverHeartbeatSucceeded: [
                  [Function]
                ],
                serverHeartbeatFailed: [
                  [Function]
                ],
                commandStarted: [
                  [Function]
                ],
                commandSucceeded: [
                  [Function]
                ],
                commandFailed: [
                  [Function]
                ],
                connectionPoolCreated: [
                  [Function]
                ],
                connectionPoolReady: [
                  [Function]
                ],
                connectionPoolCleared: [
                  [Function]
                ],
                connectionPoolClosed: [
                  [Function]
                ],
                connectionCreated: [
                  [Function]
                ],
                connectionReady: [
                  [Function]
                ],
                connectionClosed: [
                  [Function]
                ],
                connectionCheckOutStarted: [
                  [Function]
                ],
                connectionCheckOutFailed: [
                  [Function]
                ],
                connectionCheckedOut: [
                  [Function]
                ],
                connectionCheckedIn: [
                  [Function]
                ],
                descriptionReceived: [
                  [Function]
                ],
              },
              _eventsCount: 18,
              _maxListeners: undefined,
              [Symbol(kCapture)]: false,
              serverApi: undefined,
              topology: [Circular],
              pool: ConnectionPool {
                _events: {
                  connectionPoolCreated: [
                    [Function]
                  ],
                  connectionPoolReady: [
                    [Function]
                  ],
                  connectionPoolCleared: [
                    [Function]
                  ],
                  connectionPoolClosed: [
                    [Function]
                  ],
                  connectionCreated: [
                    [Function]
                  ],
                  connectionReady: [
                    [Function]
                  ],
                  connectionClosed: [
                    [Function]
                  ],
                  connectionCheckOutStarted: [
                    [Function]
                  ],
                  connectionCheckOutFailed: [
                    [Function]
                  ],
                  connectionCheckedOut: [
                    [Function]
                  ],
                  connectionCheckedIn: [
                    [Function]
                  ],
                  commandStarted: [
                    [Function]
                  ],
                  commandSucceeded: [
                    [Function]
                  ],
                  commandFailed: [
                    [Function]
                  ],
                  clusterTimeReceived: [
                    [Function]
                  ],
                },
                _eventsCount: 15,
                _maxListeners: undefined,
                [Symbol(kCapture)]: false,
                options: {
                  connectionType: [class Connection],
                  hostAddress: new HostAddress('mongodb:27017'),
                  hosts: [
                    new HostAddress('mongodb:27017')
                  ],
                  credentials: [Object ...],
                  autoSelectFamily: true,
                  compressors: [ "none" ],
                  connectTimeoutMS: 30000,
                  dbName: "Testing",
                  directConnection: false,
                  driverInfo: [Object ...],
                  enableUtf8Validation: true,
                  forceServerObjectId: false,
                  heartbeatFrequencyMS: 10000,
                  loadBalanced: false,
                  localThresholdMS: 15,
                  maxConnecting: 2,
                  maxIdleTimeMS: 0,
                  maxPoolSize: 100,
                  minPoolSize: 0,
                  minHeartbeatFrequencyMS: 500,
                  monitorCommands: false,
                  noDelay: true,
                  pkFactory: [Object ...],
                  raw: false,
                  readPreference: [Object ...],
                  retryReads: true,
                  retryWrites: true,
                  serverMonitoringMode: "auto",
                  serverSelectionTimeoutMS: 30000,
                  socketTimeoutMS: 0,
                  srvMaxHosts: 0,
                  srvServiceName: "mongodb",
                  waitQueueTimeoutMS: 0,
                  zlibCompressionLevel: 0,
                  userSpecifiedAuthSource: false,
                  userSpecifiedReplicaSet: false,
                  mongoLoggerOptions: [Object ...],
                  metadata: [Object ...],
                  extendedMetadata: Promise { <resolved> },
                  minPoolSizeCheckFrequencyMS: 100,
                  autoEncrypter: undefined,
                  [Symbol(@@mdb.enableMongoLogger)]: false,
                },
                [Symbol(poolState)]: "ready",
                [Symbol(server)]: [Circular],
                [Symbol(connections)]: List {
                  count: 1,
                  head: [Object ...],
                  length: [Getter],
                  toArray: [Function: toArray],
                  toString: [Function: toString],
                  nodes: [GeneratorFunction: nodes],
                  push: [Function: push],
                  pushMany: [Function: pushMany],
                  unshift: [Function: unshift],
                  remove: [Function: remove],
                  shift: [Function: shift],
                  pop: [Function: pop],
                  prune: [Function: prune],
                  clear: [Function: clear],
                  first: [Function: first],
                  last: [Function: last],
                  [Symbol(Symbol.iterator)]: [GeneratorFunction: GeneratorFunction],
                },
                [Symbol(pending)]: 0,
                [Symbol(checkedOut)]:                 Set {},
                [Symbol(minPoolSizeTimer)]: undefined,
                [Symbol(generation)]: 0,
                [Symbol(serviceGenerations)]: Map {},
                [Symbol(connectionCounter)]: {},
                [Symbol(cancellationToken)]: CancellationToken {
                  _events: [Object ...],
                  _eventsCount: 0,
                  _maxListeners: Infinity,
                  [Symbol(kCapture)]: false,
                  emitAndLog: [Function: emitAndLog],
                  emitAndLogHeartbeat: [Function: emitAndLogHeartbeat],
                  emitAndLogCommand: [Function: emitAndLogCommand],
                  setMaxListeners: [Function: setMaxListeners2],
                  getMaxListeners: [Function: getMaxListeners2],
                  emit: [Function: emit],
                  addListener: [Function: addListener],
                  on: [Function: addListener],
                  prependListener: [Function: prependListener],
                  once: [Function: once2],
                  prependOnceListener: [Function: prependOnceListener],
                  removeListener: [Function: removeListener],
                  off: [Function: removeListener],
                  removeAllListeners: [Function: removeAllListeners],
                  listeners: [Function: listeners],
                  rawListeners: [Function: rawListeners],
                  listenerCount: [Function: listenerCount2],
                  eventNames: [Function: eventNames],
                },
                [Symbol(waitQueue)]: List {
                  count: 0,
                  head: [Object ...],
                  length: [Getter],
                  toArray: [Function: toArray],
                  toString: [Function: toString],
                  nodes: [GeneratorFunction: nodes],
                  push: [Function: push],
                  pushMany: [Function: pushMany],
                  unshift: [Function: unshift],
                  remove: [Function: remove],
                  shift: [Function: shift],
                  pop: [Function: pop],
                  prune: [Function: prune],
                  clear: [Function: clear],
                  first: [Function: first],
                  last: [Function: last],
                  [Symbol(Symbol.iterator)]: [GeneratorFunction: GeneratorFunction],
                },
                [Symbol(metrics)]: ConnectionPoolMetrics {
                  txnConnections: 0,
                  cursorConnections: 0,
                  otherConnections: 0,
                  markPinned: [Function: markPinned],
                  markUnpinned: [Function: markUnpinned],
                  info: [Function: info],
                  reset: [Function: reset],
                },
                [Symbol(processingWaitQueue)]: false,
                mongoLogger: undefined,
                component: "connection",
                address: [Getter],
                closed: [Getter],
                generation: [Getter],
                totalConnectionCount: [Getter],
                availableConnectionCount: [Getter],
                pendingConnectionCount: [Getter],
                currentCheckedOutCount: [Getter],
                waitQueueSize: [Getter],
                loadBalanced: [Getter],
                serviceGenerations: [Getter],
                serverError: [Getter],
                checkedOutConnections: [Getter],
                waitQueueErrorMetrics: [Function: waitQueueErrorMetrics],
                ready: [Function: ready],
                checkOut: [AsyncFunction: checkOut],
                checkIn: [Function: checkIn],
                clear: [Function: clear],
                interruptInUseConnections: [Function: interruptInUseConnections],
                close: [Function: close],
                reauthenticate: [AsyncFunction: reauthenticate],
                clearMinPoolSizeTimer: [Function: clearMinPoolSizeTimer],
                destroyConnection: [Function: destroyConnection],
                connectionIsStale: [Function: connectionIsStale],
                connectionIsIdle: [Function: connectionIsIdle],
                destroyConnectionIfPerished: [Function: destroyConnectionIfPerished],
                createConnection: [Function: createConnection],
                ensureMinPoolSize: [Function: ensureMinPoolSize],
                processWaitQueue: [Function: processWaitQueue],
                emitAndLog: [Function: emitAndLog],
                emitAndLogHeartbeat: [Function: emitAndLogHeartbeat],
                emitAndLogCommand: [Function: emitAndLogCommand],
                setMaxListeners: [Function: setMaxListeners2],
                getMaxListeners: [Function: getMaxListeners2],
                emit: [Function: emit],
                addListener: [Function: addListener],
                on: [Function: addListener],
                prependListener: [Function: prependListener],
                once: [Function: once2],
                prependOnceListener: [Function: prependOnceListener],
                removeListener: [Function: removeListener],
                off: [Function: removeListener],
                removeAllListeners: [Function: removeAllListeners],
                listeners: [Function: listeners],
                rawListeners: [Function: rawListeners],
                listenerCount: [Function: listenerCount2],
                eventNames: [Function: eventNames],
              },
              s: {
                description: ServerDescription {
                  address: "mongodb:27017",
                  type: "Standalone",
                  hosts: [],
                  passives: [],
                  arbiters: [],
                  tags: [Object ...],
                  minWireVersion: 0,
                  maxWireVersion: 25,
                  roundTripTime: 3,
                  minRoundTripTime: 0,
                  lastUpdateTime: 4069,
                  lastWriteDate: 0,
                  error: null,
                  topologyVersion: [Object ...],
                  setName: null,
                  setVersion: null,
                  electionId: null,
                  logicalSessionTimeoutMinutes: 30,
                  primary: null,
                  me: null,
                  $clusterTime: null,
                  hostAddress: [Getter],
                  allHosts: [Getter],
                  isReadable: [Getter],
                  isDataBearing: [Getter],
                  isWritable: [Getter],
                  host: [Getter],
                  port: [Getter],
                  equals: [Function: equals],
                },
                options: {
                  hosts: [
                    new HostAddress('mongodb:27017')
                  ],
                  credentials: [Object ...],
                  autoSelectFamily: true,
                  compressors: [ "none" ],
                  connectTimeoutMS: 30000,
                  dbName: "Testing",
                  directConnection: false,
                  driverInfo: [Object ...],
                  enableUtf8Validation: true,
                  forceServerObjectId: false,
                  heartbeatFrequencyMS: 10000,
                  loadBalanced: false,
                  localThresholdMS: 15,
                  maxConnecting: 2,
                  maxIdleTimeMS: 0,
                  maxPoolSize: 100,
                  minPoolSize: 0,
                  minHeartbeatFrequencyMS: 500,
                  monitorCommands: false,
                  noDelay: true,
                  pkFactory: [Object ...],
                  raw: false,
                  readPreference: [Object ...],
                  retryReads: true,
                  retryWrites: true,
                  serverMonitoringMode: "auto",
                  serverSelectionTimeoutMS: 30000,
                  socketTimeoutMS: 0,
                  srvMaxHosts: 0,
                  srvServiceName: "mongodb",
                  waitQueueTimeoutMS: 0,
                  zlibCompressionLevel: 0,
                  userSpecifiedAuthSource: false,
                  userSpecifiedReplicaSet: false,
                  [Symbol(@@mdb.enableMongoLogger)]: false,
                  mongoLoggerOptions: [Object ...],
                  metadata: [Object ...],
                  extendedMetadata: Promise { <resolved> },
                },
                state: "connected",
                operationCount: 0,
              },
              monitor: Monitor {
                _events: {
                  serverHeartbeatStarted: [
                    [Function]
                  ],
                  serverHeartbeatSucceeded: [
                    [Function], [Function]
                  ],
                  serverHeartbeatFailed: [
                    [Function]
                  ],
                  resetServer: [
                    [Function]
                  ],
                },
                _eventsCount: 4,
                _maxListeners: undefined,
                [Symbol(kCapture)]: false,
                component: "topology",
                [Symbol(server)]: [Circular],
                connection: Connection {
                  _events: [Object ...],
                  _eventsCount: 0,
                  _maxListeners: undefined,
                  [Symbol(kCapture)]: false,
                  lastHelloMS: 3,
                  helloOk: true,
                  delayedTimeoutId: null,
                  closed: false,
                  clusterTime: null,
                  error: null,
                  dataEvents: null,
                  socket: [Socket ...],
                  id: "<monitor>",
                  address: "172.18.0.2:27017",
                  socketTimeoutMS: 0,
                  monitorCommands: false,
                  serverApi: undefined,
                  mongoLogger: undefined,
                  established: true,
                  description: [Object ...],
                  generation: 0,
                  lastUseTime: 4065,
                  messageStream: [Object ...],
                  authContext: [Object ...],
                  hello: [Getter/Setter],
                  serviceId: [Getter],
                  loadBalanced: [Getter],
                  idleTime: [Getter],
                  hasSessionSupport: [Getter],
                  supportsOpMsg: [Getter],
                  shouldEmitAndLogCommand: [Getter],
                  markAvailable: [Function: markAvailable],
                  onError: [Function: onError],
                  onClose: [Function: onClose],
                  onTimeout: [Function: onTimeout],
                  destroy: [Function: destroy],
                  cleanup: [Function: cleanup],
                  prepareCommand: [Function: prepareCommand],
                  sendWire: [AsyncGeneratorFunction: sendWire],
                  sendCommand: [AsyncGeneratorFunction: sendCommand],
                  command: [AsyncFunction: command],
                  exhaustCommand: [Function: exhaustCommand],
                  throwIfAborted: [Function: throwIfAborted],
                  writeCommand: [AsyncFunction: writeCommand],
                  readMany: [AsyncGeneratorFunction: readMany],
                  emitAndLog: [Function: emitAndLog],
                  emitAndLogHeartbeat: [Function: emitAndLogHeartbeat],
                  emitAndLogCommand: [Function: emitAndLogCommand],
                  setMaxListeners: [Function: setMaxListeners2],
                  getMaxListeners: [Function: getMaxListeners2],
                  emit: [Function: emit],
                  addListener: [Function: addListener],
                  on: [Function: addListener],
                  prependListener: [Function: prependListener],
                  once: [Function: once2],
                  prependOnceListener: [Function: prependOnceListener],
                  removeListener: [Function: removeListener],
                  off: [Function: removeListener],
                  removeAllListeners: [Function: removeAllListeners],
                  listeners: [Function: listeners],
                  rawListeners: [Function: rawListeners],
                  listenerCount: [Function: listenerCount2],
                  eventNames: [Function: eventNames],
                },
                [Symbol(cancellationToken)]: CancellationToken {
                  _events: [Object ...],
                  _eventsCount: 0,
                  _maxListeners: Infinity,
                  [Symbol(kCapture)]: false,
                  emitAndLog: [Function: emitAndLog],
                  emitAndLogHeartbeat: [Function: emitAndLogHeartbeat],
                  emitAndLogCommand: [Function: emitAndLogCommand],
                  setMaxListeners: [Function: setMaxListeners2],
                  getMaxListeners: [Function: getMaxListeners2],
                  emit: [Function: emit],
                  addListener: [Function: addListener],
                  on: [Function: addListener],
                  prependListener: [Function: prependListener],
                  once: [Function: once2],
                  prependOnceListener: [Function: prependOnceListener],
                  removeListener: [Function: removeListener],
                  off: [Function: removeListener],
                  removeAllListeners: [Function: removeAllListeners],
                  listeners: [Function: listeners],
                  rawListeners: [Function: rawListeners],
                  listenerCount: [Function: listenerCount2],
                  eventNames: [Function: eventNames],
                },
                [Symbol(monitorId)]: MonitorInterval {
                  isExpeditedCallToFnScheduled: true,
                  stopped: false,
                  isExecutionInProgress: false,
                  hasExecutedOnce: false,
                  _executeAndReschedule: [Function],
                  fn: [Function],
                  lastExecutionEnded: 4070,
                  heartbeatFrequencyMS: 10000,
                  minHeartbeatFrequencyMS: 500,
                  timerId: Timeout (#4),
                  wake: [Function: wake],
                  stop: [Function: stop],
                  toString: [Function: toString],
                  toJSON: [Function: toJSON],
                  _reschedule: [Function: _reschedule],
                },
                s: {
                  state: "idle",
                },
                address: "mongodb:27017",
                options: {
                  connectTimeoutMS: 30000,
                  heartbeatFrequencyMS: 10000,
                  minHeartbeatFrequencyMS: 500,
                  serverMonitoringMode: "auto",
                },
                isRunningInFaasEnv: false,
                mongoLogger: undefined,
                rttSampler: RTTSampler {
                  rttSamples: Float64Array(10) [ 3, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
                  length: 1,
                  writeIndex: 1,
                  addSample: [Function: addSample],
                  min: [Function: min],
                  average: [Function: average],
                  last: [Getter],
                  clear: [Function: clear],
                },
                connectOptions: {
                  id: "<monitor>",
                  generation: 0,
                  cancellationToken: [Object ...],
                  hostAddress: new HostAddress('mongodb:27017'),
                  hosts: [
                    new HostAddress('mongodb:27017')
                  ],
                  autoSelectFamily: true,
                  compressors: [ "none" ],
                  connectTimeoutMS: 30000,
                  dbName: "Testing",
                  directConnection: false,
                  driverInfo: [Object ...],
                  enableUtf8Validation: true,
                  forceServerObjectId: false,
                  heartbeatFrequencyMS: 10000,
                  loadBalanced: false,
                  localThresholdMS: 15,
                  maxConnecting: 2,
                  maxIdleTimeMS: 0,
                  maxPoolSize: 100,
                  minPoolSize: 0,
                  minHeartbeatFrequencyMS: 500,
                  monitorCommands: false,
                  noDelay: true,
                  pkFactory: [Object ...],
                  raw: false,
                  readPreference: [Object ...],
                  retryReads: true,
                  retryWrites: true,
                  serverMonitoringMode: "auto",
                  serverSelectionTimeoutMS: 30000,
                  socketTimeoutMS: 0,
                  srvMaxHosts: 0,
                  srvServiceName: "mongodb",
                  waitQueueTimeoutMS: 0,
                  zlibCompressionLevel: 0,
                  userSpecifiedAuthSource: false,
                  userSpecifiedReplicaSet: false,
                  mongoLoggerOptions: [Object ...],
                  metadata: [Object ...],
                  extendedMetadata: Promise { <resolved> },
                  useBigInt64: false,
                  promoteLongs: true,
                  promoteValues: true,
                  promoteBuffers: true,
                  [Symbol(@@mdb.enableMongoLogger)]: false,
                },
                connect: [Function: connect],
                requestCheck: [Function: requestCheck],
                reset: [Function: reset],
                close: [Function: close],
                roundTripTime: [Getter],
                minRoundTripTime: [Getter],
                latestRtt: [Getter],
                addRttSample: [Function: addRttSample],
                clearRttSamples: [Function: clearRttSamples],
                emitAndLog: [Function: emitAndLog],
                emitAndLogHeartbeat: [Function: emitAndLogHeartbeat],
                emitAndLogCommand: [Function: emitAndLogCommand],
                setMaxListeners: [Function: setMaxListeners2],
                getMaxListeners: [Function: getMaxListeners2],
                emit: [Function: emit],
                addListener: [Function: addListener],
                on: [Function: addListener],
                prependListener: [Function: prependListener],
                once: [Function: once2],
                prependOnceListener: [Function: prependOnceListener],
                removeListener: [Function: removeListener],
                off: [Function: removeListener],
                removeAllListeners: [Function: removeAllListeners],
                listeners: [Function: listeners],
                rawListeners: [Function: rawListeners],
                listenerCount: [Function: listenerCount2],
                eventNames: [Function: eventNames],
              },
              clusterTime: [Getter/Setter],
              description: [Getter],
              name: [Getter],
              autoEncrypter: [Getter],
              loadBalanced: [Getter],
              connect: [Function: connect],
              destroy: [Function: destroy],
              requestCheck: [Function: requestCheck],
              command: [AsyncFunction: command],
              handleError: [Function: handleError],
              decorateCommandError: [Function: decorateCommandError],
              decrementOperationCount: [Function: decrementOperationCount],
              incrementOperationCount: [Function: incrementOperationCount],
              emitAndLog: [Function: emitAndLog],
              emitAndLogHeartbeat: [Function: emitAndLogHeartbeat],
              emitAndLogCommand: [Function: emitAndLogCommand],
              setMaxListeners: [Function: setMaxListeners2],
              getMaxListeners: [Function: getMaxListeners2],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once2],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount2],
              eventNames: [Function: eventNames],
            },
          },
          credentials: MongoCredentials {
            username: "thib",
            password: "morb",
            source: "Testing",
            mechanism: "DEFAULT",
            mechanismProperties: {},
            equals: [Function: equals],
            resolveAuthMechanism: [Function: resolveAuthMechanism],
            validate: [Function: validate],
          },
          clusterTime: undefined,
          connectionTimers:           Set {},
          detectShardedTopology: [Function: detectShardedTopology],
          detectSrvRecords: [Function: detectSrvRecords],
        },
        mongoLogger: undefined,
        component: "topology",
        connectionLock: undefined,
        detectShardedTopology: [Function: detectShardedTopology],
        detectSrvRecords: [Function: detectSrvRecords],
        description: [Getter],
        loadBalanced: [Getter],
        serverApi: [Getter],
        capabilities: [Getter],
        connect: [AsyncFunction: connect],
        _connect: [AsyncFunction: _connect],
        close: [Function: close],
        selectServer: [AsyncFunction: selectServer],
        serverUpdateHandler: [Function: serverUpdateHandler],
        auth: [Function: auth],
        clientMetadata: [Getter],
        isConnected: [Function: isConnected],
        isDestroyed: [Function: isDestroyed],
        lastHello: [Function: lastHello],
        commonWireVersion: [Getter],
        logicalSessionTimeoutMinutes: [Getter],
        clusterTime: [Getter/Setter],
        emitAndLog: [Function: emitAndLog],
        emitAndLogHeartbeat: [Function: emitAndLogHeartbeat],
        emitAndLogCommand: [Function: emitAndLogCommand],
        setMaxListeners: [Function: setMaxListeners2],
        getMaxListeners: [Function: getMaxListeners2],
        emit: [Function: emit],
        addListener: [Function: addListener],
        on: [Function: addListener],
        prependListener: [Function: prependListener],
        once: [Function: once2],
        prependOnceListener: [Function: prependOnceListener],
        removeListener: [Function: removeListener],
        off: [Function: removeListener],
        removeAllListeners: [Function: removeAllListeners],
        listeners: [Function: listeners],
        rawListeners: [Function: rawListeners],
        listenerCount: [Function: listenerCount2],
        eventNames: [Function: eventNames],
      },
      connectionLock: undefined,
      asyncDispose: [AsyncFunction: asyncDispose],
      checkForNonGenuineHosts: [Function: checkForNonGenuineHosts],
      options: [Getter],
      serverApi: [Getter],
      monitorCommands: [Getter/Setter],
      autoEncrypter: [Getter],
      readConcern: [Getter],
      writeConcern: [Getter],
      readPreference: [Getter],
      bsonOptions: [Getter],
      connect: [AsyncFunction: connect],
      _connect: [AsyncFunction: _connect],
      close: [AsyncFunction: close],
      db: [Function: db],
      startSession: [Function: startSession],
      withSession: [AsyncFunction: withSession],
      watch: [Function: watch],
      [Symbol(Symbol.asyncDispose)]: [AsyncFunction: asyncDispose],
      emitAndLog: [Function: emitAndLog],
      emitAndLogHeartbeat: [Function: emitAndLogHeartbeat],
      emitAndLogCommand: [Function: emitAndLogCommand],
      setMaxListeners: [Function: setMaxListeners2],
      getMaxListeners: [Function: getMaxListeners2],
      emit: [Function: emit],
      addListener: [Function: addListener],
      on: [Function: addListener],
      prependListener: [Function: prependListener],
      once: [Function: once2],
      prependOnceListener: [Function: prependOnceListener],
      removeListener: [Function: removeListener],
      off: [Function: removeListener],
      removeAllListeners: [Function: removeAllListeners],
      listeners: [Function: listeners],
      rawListeners: [Function: rawListeners],
      listenerCount: [Function: listenerCount2],
      eventNames: [Function: eventNames],
    },
    sessionPool: ServerSessionPool {
      client: MongoClient {
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        [Symbol(kCapture)]: false,
        [Symbol(options)]: {
          hosts: [
            new HostAddress('mongodb:27017')
          ],
          credentials: MongoCredentials {
            username: "thib",
            password: "morb",
            source: "Testing",
            mechanism: "DEFAULT",
            mechanismProperties: {},
            equals: [Function: equals],
            resolveAuthMechanism: [Function: resolveAuthMechanism],
            validate: [Function: validate],
          },
          autoSelectFamily: true,
          compressors: [ "none" ],
          connectTimeoutMS: 30000,
          dbName: "Testing",
          directConnection: false,
          driverInfo: {},
          enableUtf8Validation: true,
          forceServerObjectId: false,
          heartbeatFrequencyMS: 10000,
          loadBalanced: false,
          localThresholdMS: 15,
          maxConnecting: 2,
          maxIdleTimeMS: 0,
          maxPoolSize: 100,
          minPoolSize: 0,
          minHeartbeatFrequencyMS: 500,
          monitorCommands: false,
          noDelay: true,
          pkFactory: {
            createPk: [Function: createPk],
          },
          raw: false,
          readPreference: ReadPreference {
            mode: "primary",
            tags: undefined,
            hedge: undefined,
            maxStalenessSeconds: undefined,
            minWireVersion: undefined,
            preference: [Getter],
            isValid: [Function: isValid],
            secondaryOk: [Function: secondaryOk],
            equals: [Function: equals],
            toJSON: [Function: toJSON],
          },
          retryReads: true,
          retryWrites: true,
          serverMonitoringMode: "auto",
          serverSelectionTimeoutMS: 30000,
          socketTimeoutMS: 0,
          srvMaxHosts: 0,
          srvServiceName: "mongodb",
          waitQueueTimeoutMS: 0,
          zlibCompressionLevel: 0,
          userSpecifiedAuthSource: false,
          userSpecifiedReplicaSet: false,
          [Symbol(@@mdb.enableMongoLogger)]: false,
          mongoLoggerOptions: {
            componentSeverities: {
              command: "off",
              topology: "off",
              serverSelection: "off",
              connection: "off",
              client: "off",
              default: "off",
            },
            maxDocumentLength: 1000,
            logDestination: {
              write: [Function: fn],
            },
            logDestinationIsStdErr: true,
          },
          metadata: {
            driver: {
              name: "nodejs",
              version: "6.9.0",
            },
            platform: "Bun v1.1.31, LE",
            os: {
              name: "linux",
              architecture: "x64",
              version: "6.6.54",
              type: "Linux",
            },
          },
          extendedMetadata: Promise { <resolved> },
        },
        mongoLogger: undefined,
        s: {
          url: "mongodb://thib:morb@mongodb:27017/Testing",
          bsonOptions: {
            raw: false,
            useBigInt64: false,
            promoteLongs: true,
            promoteValues: true,
            promoteBuffers: false,
            ignoreUndefined: false,
            bsonRegExp: false,
            serializeFunctions: false,
            fieldsAsRaw: {},
            enableUtf8Validation: true,
          },
          namespace: MongoDBNamespace {
            db: "admin",
            collection: undefined,
            toString: [Function: toString],
            withCollection: [Function: withCollection],
          },
          hasBeenClosed: false,
          sessionPool: [Circular],
          activeSessions:           Set(1) {
            [Circular],
},
          authProviders: MongoClientAuthProviders {
            existingProviders: Map(1) {
              "SCRAM-SHA-256": ScramSHA256 {
                cryptoMethod: "sha256",
                prepare: [AsyncFunction: prepare],
                auth: [AsyncFunction: auth],
                reauth: [AsyncFunction: reauth],
              },
            },
            getOrCreateProvider: [Function: getOrCreateProvider],
            getWorkflow: [Function: getWorkflow],
          },
          options: [Getter],
          readConcern: [Getter],
          writeConcern: [Getter],
          readPreference: [Getter],
          isMongoClient: [Getter],
        },
        topology: Topology {
          _events: {
            connectionPoolCreated: [
              [Function]
            ],
            connectionPoolReady: [
              [Function]
            ],
            connectionPoolCleared: [
              [Function]
            ],
            connectionPoolClosed: [
              [Function]
            ],
            connectionCreated: [
              [Function]
            ],
            connectionReady: [
              [Function]
            ],
            connectionClosed: [
              [Function]
            ],
            connectionCheckOutStarted: [
              [Function]
            ],
            connectionCheckOutFailed: [
              [Function]
            ],
            connectionCheckedOut: [
              [Function]
            ],
            connectionCheckedIn: [
              [Function]
            ],
            commandStarted: [
              [Function]
            ],
            commandSucceeded: [
              [Function]
            ],
            commandFailed: [
              [Function]
            ],
            serverOpening: [
              [Function]
            ],
            serverClosed: [
              [Function]
            ],
            serverDescriptionChanged: [
              [Function]
            ],
            topologyOpening: [
              [Function]
            ],
            topologyClosed: [
              [Function]
            ],
            topologyDescriptionChanged: [
              [Function]
            ],
            error: [
              [Function]
            ],
            timeout: [
              [Function]
            ],
            close: [
              [Function]
            ],
            serverHeartbeatStarted: [
              [Function]
            ],
            serverHeartbeatSucceeded: [
              [Function]
            ],
            serverHeartbeatFailed: [
              [Function]
            ],
          },
          _eventsCount: 26,
          _maxListeners: undefined,
          [Symbol(kCapture)]: false,
          client: [Circular],
          [Symbol(waitQueue)]: List {
            count: 0,
            head: {
              next: [Circular],
              prev: [Circular],
              value: null,
            },
            length: [Getter],
            toArray: [Function: toArray],
            toString: [Function: toString],
            nodes: [GeneratorFunction: nodes],
            push: [Function: push],
            pushMany: [Function: pushMany],
            unshift: [Function: unshift],
            remove: [Function: remove],
            shift: [Function: shift],
            pop: [Function: pop],
            prune: [Function: prune],
            clear: [Function: clear],
            first: [Function: first],
            last: [Function: last],
            [Symbol(Symbol.iterator)]: [GeneratorFunction: GeneratorFunction],
          },
          s: {
            id: 0,
            options: {
              hosts: [
                new HostAddress('mongodb:27017')
              ],
              credentials: MongoCredentials {
                username: "thib",
                password: "morb",
                source: "Testing",
                mechanism: "DEFAULT",
                mechanismProperties: {},
                equals: [Function: equals],
                resolveAuthMechanism: [Function: resolveAuthMechanism],
                validate: [Function: validate],
              },
              autoSelectFamily: true,
              compressors: [ "none" ],
              connectTimeoutMS: 30000,
              dbName: "Testing",
              directConnection: false,
              driverInfo: {},
              enableUtf8Validation: true,
              forceServerObjectId: false,
              heartbeatFrequencyMS: 10000,
              loadBalanced: false,
              localThresholdMS: 15,
              maxConnecting: 2,
              maxIdleTimeMS: 0,
              maxPoolSize: 100,
              minPoolSize: 0,
              minHeartbeatFrequencyMS: 500,
              monitorCommands: false,
              noDelay: true,
              pkFactory: {
                createPk: [Function: createPk],
              },
              raw: false,
              readPreference: ReadPreference {
                mode: "primary",
                tags: undefined,
                hedge: undefined,
                maxStalenessSeconds: undefined,
                minWireVersion: undefined,
                preference: [Getter],
                isValid: [Function: isValid],
                secondaryOk: [Function: secondaryOk],
                equals: [Function: equals],
                toJSON: [Function: toJSON],
              },
              retryReads: true,
              retryWrites: true,
              serverMonitoringMode: "auto",
              serverSelectionTimeoutMS: 30000,
              socketTimeoutMS: 0,
              srvMaxHosts: 0,
              srvServiceName: "mongodb",
              waitQueueTimeoutMS: 0,
              zlibCompressionLevel: 0,
              userSpecifiedAuthSource: false,
              userSpecifiedReplicaSet: false,
              [Symbol(@@mdb.enableMongoLogger)]: false,
              mongoLoggerOptions: {
                componentSeverities: {
                  command: "off",
                  topology: "off",
                  serverSelection: "off",
                  connection: "off",
                  client: "off",
                  default: "off",
                },
                maxDocumentLength: 1000,
                logDestination: {
                  write: [Function: fn],
                },
                logDestinationIsStdErr: true,
              },
              metadata: {
                driver: {
                  name: "nodejs",
                  version: "6.9.0",
                },
                platform: "Bun v1.1.31, LE",
                os: {
                  name: "linux",
                  architecture: "x64",
                  version: "6.6.54",
                  type: "Linux",
                },
              },
              extendedMetadata: Promise { <resolved> },
            },
            seedlist: [
              new HostAddress('mongodb:27017')
            ],
            state: "connected",
            description: TopologyDescription {
              type: "Single",
              servers: Map(1) {
                "mongodb:27017": ServerDescription {
                  address: "mongodb:27017",
                  type: "Standalone",
                  hosts: [],
                  passives: [],
                  arbiters: [],
                  tags: [Object ...],
                  minWireVersion: 0,
                  maxWireVersion: 25,
                  roundTripTime: 3,
                  minRoundTripTime: 0,
                  lastUpdateTime: 4069,
                  lastWriteDate: 0,
                  error: null,
                  topologyVersion: [Object ...],
                  setName: null,
                  setVersion: null,
                  electionId: null,
                  logicalSessionTimeoutMinutes: 30,
                  primary: null,
                  me: null,
                  $clusterTime: null,
                  hostAddress: [Getter],
                  allHosts: [Getter],
                  isReadable: [Getter],
                  isDataBearing: [Getter],
                  isWritable: [Getter],
                  host: [Getter],
                  port: [Getter],
                  equals: [Function: equals],
                },
              },
              stale: false,
              compatible: true,
              heartbeatFrequencyMS: 10000,
              localThresholdMS: 15,
              setName: null,
              maxElectionId: null,
              maxSetVersion: null,
              commonWireVersion: 0,
              logicalSessionTimeoutMinutes: 30,
              updateFromSrvPollingEvent: [Function: updateFromSrvPollingEvent],
              update: [Function: update],
              error: [Getter],
              hasKnownServers: [Getter],
              hasDataBearingServers: [Getter],
              hasServer: [Function: hasServer],
              toJSON: [Function: toJSON],
            },
            serverSelectionTimeoutMS: 30000,
            heartbeatFrequencyMS: 10000,
            minHeartbeatFrequencyMS: 500,
            servers: Map(1) {
              "mongodb:27017": Server {
                _events: {
                  serverHeartbeatStarted: [
                    [Function]
                  ],
                  serverHeartbeatSucceeded: [
                    [Function]
                  ],
                  serverHeartbeatFailed: [
                    [Function]
                  ],
                  commandStarted: [
                    [Function]
                  ],
                  commandSucceeded: [
                    [Function]
                  ],
                  commandFailed: [
                    [Function]
                  ],
                  connectionPoolCreated: [
                    [Function]
                  ],
                  connectionPoolReady: [
                    [Function]
                  ],
                  connectionPoolCleared: [
                    [Function]
                  ],
                  connectionPoolClosed: [
                    [Function]
                  ],
                  connectionCreated: [
                    [Function]
                  ],
                  connectionReady: [
                    [Function]
                  ],
                  connectionClosed: [
                    [Function]
                  ],
                  connectionCheckOutStarted: [
                    [Function]
                  ],
                  connectionCheckOutFailed: [
                    [Function]
                  ],
                  connectionCheckedOut: [
                    [Function]
                  ],
                  connectionCheckedIn: [
                    [Function]
                  ],
                  descriptionReceived: [
                    [Function]
                  ],
                },
                _eventsCount: 18,
                _maxListeners: undefined,
                [Symbol(kCapture)]: false,
                serverApi: undefined,
                topology: [Circular],
                pool: ConnectionPool {
                  _events: [Object ...],
                  _eventsCount: 15,
                  _maxListeners: undefined,
                  [Symbol(kCapture)]: false,
                  options: [Object ...],
                  [Symbol(poolState)]: "ready",
                  [Symbol(server)]: [Circular],
                  [Symbol(connections)]: [List ...],
                  [Symbol(pending)]: 0,
                  [Symbol(checkedOut)]:                   Set {},
                  [Symbol(minPoolSizeTimer)]: undefined,
                  [Symbol(generation)]: 0,
                  [Symbol(serviceGenerations)]: Map {},
                  [Symbol(connectionCounter)]: {},
                  [Symbol(cancellationToken)]: [Object ...],
                  [Symbol(waitQueue)]: [List ...],
                  [Symbol(metrics)]: [Object ...],
                  [Symbol(processingWaitQueue)]: false,
                  mongoLogger: undefined,
                  component: "connection",
                  address: [Getter],
                  closed: [Getter],
                  generation: [Getter],
                  totalConnectionCount: [Getter],
                  availableConnectionCount: [Getter],
                  pendingConnectionCount: [Getter],
                  currentCheckedOutCount: [Getter],
                  waitQueueSize: [Getter],
                  loadBalanced: [Getter],
                  serviceGenerations: [Getter],
                  serverError: [Getter],
                  checkedOutConnections: [Getter],
                  waitQueueErrorMetrics: [Function: waitQueueErrorMetrics],
                  ready: [Function: ready],
                  checkOut: [AsyncFunction: checkOut],
                  checkIn: [Function: checkIn],
                  clear: [Function: clear],
                  interruptInUseConnections: [Function: interruptInUseConnections],
                  close: [Function: close],
                  reauthenticate: [AsyncFunction: reauthenticate],
                  clearMinPoolSizeTimer: [Function: clearMinPoolSizeTimer],
                  destroyConnection: [Function: destroyConnection],
                  connectionIsStale: [Function: connectionIsStale],
                  connectionIsIdle: [Function: connectionIsIdle],
                  destroyConnectionIfPerished: [Function: destroyConnectionIfPerished],
                  createConnection: [Function: createConnection],
                  ensureMinPoolSize: [Function: ensureMinPoolSize],
                  processWaitQueue: [Function: processWaitQueue],
                  emitAndLog: [Function: emitAndLog],
                  emitAndLogHeartbeat: [Function: emitAndLogHeartbeat],
                  emitAndLogCommand: [Function: emitAndLogCommand],
                  setMaxListeners: [Function: setMaxListeners2],
                  getMaxListeners: [Function: getMaxListeners2],
                  emit: [Function: emit],
                  addListener: [Function: addListener],
                  on: [Function: addListener],
                  prependListener: [Function: prependListener],
                  once: [Function: once2],
                  prependOnceListener: [Function: prependOnceListener],
                  removeListener: [Function: removeListener],
                  off: [Function: removeListener],
                  removeAllListeners: [Function: removeAllListeners],
                  listeners: [Function: listeners],
                  rawListeners: [Function: rawListeners],
                  listenerCount: [Function: listenerCount2],
                  eventNames: [Function: eventNames],
                },
                s: {
                  description: [Object ...],
                  options: [Object ...],
                  state: "connected",
                  operationCount: 0,
                },
                monitor: Monitor {
                  _events: [Object ...],
                  _eventsCount: 4,
                  _maxListeners: undefined,
                  [Symbol(kCapture)]: false,
                  component: "topology",
                  [Symbol(server)]: [Circular],
                  connection: [Object ...],
                  [Symbol(cancellationToken)]: [Object ...],
                  [Symbol(monitorId)]: [Object ...],
                  s: [Object ...],
                  address: "mongodb:27017",
                  options: [Object ...],
                  isRunningInFaasEnv: false,
                  mongoLogger: undefined,
                  rttSampler: [Object ...],
                  connectOptions: [Object ...],
                  connect: [Function: connect],
                  requestCheck: [Function: requestCheck],
                  reset: [Function: reset],
                  close: [Function: close],
                  roundTripTime: [Getter],
                  minRoundTripTime: [Getter],
                  latestRtt: [Getter],
                  addRttSample: [Function: addRttSample],
                  clearRttSamples: [Function: clearRttSamples],
                  emitAndLog: [Function: emitAndLog],
                  emitAndLogHeartbeat: [Function: emitAndLogHeartbeat],
                  emitAndLogCommand: [Function: emitAndLogCommand],
                  setMaxListeners: [Function: setMaxListeners2],
                  getMaxListeners: [Function: getMaxListeners2],
                  emit: [Function: emit],
                  addListener: [Function: addListener],
                  on: [Function: addListener],
                  prependListener: [Function: prependListener],
                  once: [Function: once2],
                  prependOnceListener: [Function: prependOnceListener],
                  removeListener: [Function: removeListener],
                  off: [Function: removeListener],
                  removeAllListeners: [Function: removeAllListeners],
                  listeners: [Function: listeners],
                  rawListeners: [Function: rawListeners],
                  listenerCount: [Function: listenerCount2],
                  eventNames: [Function: eventNames],
                },
                clusterTime: [Getter/Setter],
                description: [Getter],
                name: [Getter],
                autoEncrypter: [Getter],
                loadBalanced: [Getter],
                connect: [Function: connect],
                destroy: [Function: destroy],
                requestCheck: [Function: requestCheck],
                command: [AsyncFunction: command],
                handleError: [Function: handleError],
                decorateCommandError: [Function: decorateCommandError],
                decrementOperationCount: [Function: decrementOperationCount],
                incrementOperationCount: [Function: incrementOperationCount],
                emitAndLog: [Function: emitAndLog],
                emitAndLogHeartbeat: [Function: emitAndLogHeartbeat],
                emitAndLogCommand: [Function: emitAndLogCommand],
                setMaxListeners: [Function: setMaxListeners2],
                getMaxListeners: [Function: getMaxListeners2],
                emit: [Function: emit],
                addListener: [Function: addListener],
                on: [Function: addListener],
                prependListener: [Function: prependListener],
                once: [Function: once2],
                prependOnceListener: [Function: prependOnceListener],
                removeListener: [Function: removeListener],
                off: [Function: removeListener],
                removeAllListeners: [Function: removeAllListeners],
                listeners: [Function: listeners],
                rawListeners: [Function: rawListeners],
                listenerCount: [Function: listenerCount2],
                eventNames: [Function: eventNames],
              },
            },
            credentials: MongoCredentials {
              username: "thib",
              password: "morb",
              source: "Testing",
              mechanism: "DEFAULT",
              mechanismProperties: {},
              equals: [Function: equals],
              resolveAuthMechanism: [Function: resolveAuthMechanism],
              validate: [Function: validate],
            },
            clusterTime: undefined,
            connectionTimers:             Set {},
            detectShardedTopology: [Function: detectShardedTopology],
            detectSrvRecords: [Function: detectSrvRecords],
          },
          mongoLogger: undefined,
          component: "topology",
          connectionLock: undefined,
          detectShardedTopology: [Function: detectShardedTopology],
          detectSrvRecords: [Function: detectSrvRecords],
          description: [Getter],
          loadBalanced: [Getter],
          serverApi: [Getter],
          capabilities: [Getter],
          connect: [AsyncFunction: connect],
          _connect: [AsyncFunction: _connect],
          close: [Function: close],
          selectServer: [AsyncFunction: selectServer],
          serverUpdateHandler: [Function: serverUpdateHandler],
          auth: [Function: auth],
          clientMetadata: [Getter],
          isConnected: [Function: isConnected],
          isDestroyed: [Function: isDestroyed],
          lastHello: [Function: lastHello],
          commonWireVersion: [Getter],
          logicalSessionTimeoutMinutes: [Getter],
          clusterTime: [Getter/Setter],
          emitAndLog: [Function: emitAndLog],
          emitAndLogHeartbeat: [Function: emitAndLogHeartbeat],
          emitAndLogCommand: [Function: emitAndLogCommand],
          setMaxListeners: [Function: setMaxListeners2],
          getMaxListeners: [Function: getMaxListeners2],
          emit: [Function: emit],
          addListener: [Function: addListener],
          on: [Function: addListener],
          prependListener: [Function: prependListener],
          once: [Function: once2],
          prependOnceListener: [Function: prependOnceListener],
          removeListener: [Function: removeListener],
          off: [Function: removeListener],
          removeAllListeners: [Function: removeAllListeners],
          listeners: [Function: listeners],
          rawListeners: [Function: rawListeners],
          listenerCount: [Function: listenerCount2],
          eventNames: [Function: eventNames],
        },
        connectionLock: undefined,
        asyncDispose: [AsyncFunction: asyncDispose],
        checkForNonGenuineHosts: [Function: checkForNonGenuineHosts],
        options: [Getter],
        serverApi: [Getter],
        monitorCommands: [Getter/Setter],
        autoEncrypter: [Getter],
        readConcern: [Getter],
        writeConcern: [Getter],
        readPreference: [Getter],
        bsonOptions: [Getter],
        connect: [AsyncFunction: connect],
        _connect: [AsyncFunction: _connect],
        close: [AsyncFunction: close],
        db: [Function: db],
        startSession: [Function: startSession],
        withSession: [AsyncFunction: withSession],
        watch: [Function: watch],
        [Symbol(Symbol.asyncDispose)]: [AsyncFunction: asyncDispose],
        emitAndLog: [Function: emitAndLog],
        emitAndLogHeartbeat: [Function: emitAndLogHeartbeat],
        emitAndLogCommand: [Function: emitAndLogCommand],
        setMaxListeners: [Function: setMaxListeners2],
        getMaxListeners: [Function: getMaxListeners2],
        emit: [Function: emit],
        addListener: [Function: addListener],
        on: [Function: addListener],
        prependListener: [Function: prependListener],
        once: [Function: once2],
        prependOnceListener: [Function: prependOnceListener],
        removeListener: [Function: removeListener],
        off: [Function: removeListener],
        removeAllListeners: [Function: removeAllListeners],
        listeners: [Function: listeners],
        rawListeners: [Function: rawListeners],
        listenerCount: [Function: listenerCount2],
        eventNames: [Function: eventNames],
      },
      sessions: List {
        count: 0,
        head: {
          next: [Circular],
          prev: [Circular],
          value: null,
        },
        length: [Getter],
        toArray: [Function: toArray],
        toString: [Function: toString],
        nodes: [GeneratorFunction: nodes],
        push: [Function: push],
        pushMany: [Function: pushMany],
        unshift: [Function: unshift],
        remove: [Function: remove],
        shift: [Function: shift],
        pop: [Function: pop],
        prune: [Function: prune],
        clear: [Function: clear],
        first: [Function: first],
        last: [Function: last],
        [Symbol(Symbol.iterator)]: [GeneratorFunction: GeneratorFunction],
      },
      acquire: [Function: acquire],
      release: [Function: release],
    },
    hasEnded: false,
    clientOptions: {
      hosts: [
        new HostAddress('mongodb:27017')
      ],
      credentials: MongoCredentials {
        username: "thib",
        password: "morb",
        source: "Testing",
        mechanism: "DEFAULT",
        mechanismProperties: {},
        equals: [Function: equals],
        resolveAuthMechanism: [Function: resolveAuthMechanism],
        validate: [Function: validate],
      },
      autoSelectFamily: true,
      compressors: [ "none" ],
      connectTimeoutMS: 30000,
      dbName: "Testing",
      directConnection: false,
      driverInfo: {},
      enableUtf8Validation: true,
      forceServerObjectId: false,
      heartbeatFrequencyMS: 10000,
      loadBalanced: false,
      localThresholdMS: 15,
      maxConnecting: 2,
      maxIdleTimeMS: 0,
      maxPoolSize: 100,
      minPoolSize: 0,
      minHeartbeatFrequencyMS: 500,
      monitorCommands: false,
      noDelay: true,
      pkFactory: {
        createPk: [Function: createPk],
      },
      raw: false,
      readPreference: ReadPreference {
        mode: "primary",
        tags: undefined,
        hedge: undefined,
        maxStalenessSeconds: undefined,
        minWireVersion: undefined,
        preference: [Getter],
        isValid: [Function: isValid],
        secondaryOk: [Function: secondaryOk],
        equals: [Function: equals],
        toJSON: [Function: toJSON],
      },
      retryReads: true,
      retryWrites: true,
      serverMonitoringMode: "auto",
      serverSelectionTimeoutMS: 30000,
      socketTimeoutMS: 0,
      srvMaxHosts: 0,
      srvServiceName: "mongodb",
      waitQueueTimeoutMS: 0,
      zlibCompressionLevel: 0,
      userSpecifiedAuthSource: false,
      userSpecifiedReplicaSet: false,
      [Symbol(@@mdb.enableMongoLogger)]: false,
      mongoLoggerOptions: {
        componentSeverities: {
          command: "off",
          topology: "off",
          serverSelection: "off",
          connection: "off",
          client: "off",
          default: "off",
        },
        maxDocumentLength: 1000,
        logDestination: {
          write: [Function: fn],
        },
        logDestinationIsStdErr: true,
      },
      metadata: {
        driver: {
          name: "nodejs",
          version: "6.9.0",
        },
        platform: "Bun v1.1.31, LE",
        os: {
          name: "linux",
          architecture: "x64",
          version: "6.6.54",
          type: "Linux",
        },
      },
      extendedMetadata: Promise { <resolved> },
    },
    timeoutMS: undefined,
    explicit: false,
    [Symbol(serverSession)]: null,
    [Symbol(txnNumberIncrement)]: 0,
    supports: {
      causalConsistency: false,
    },
    clusterTime: undefined,
    operationTime: undefined,
    owner: [Circular],
    defaultTransactionOptions: {},
    transaction: Transaction {
      state: "NO_TRANSACTION",
      options: {},
      _pinnedServer: undefined,
      _recoveryToken: undefined,
      server: [Getter],
      recoveryToken: [Getter],
      isPinned: [Getter],
      isStarting: [Getter],
      isActive: [Getter],
      isCommitted: [Getter],
      transition: [Function: transition],
      pinServer: [Function: pinServer],
      unpinServer: [Function: unpinServer],
    },
    id: [Getter],
    serverSession: [Getter],
    snapshotEnabled: [Getter],
    loadBalanced: [Getter],
    pinnedConnection: [Getter],
    pin: [Function: pin],
    unpin: [Function: unpin],
    isPinned: [Getter],
    endSession: [AsyncFunction: endSession],
    asyncDispose: [AsyncFunction: asyncDispose],
    advanceOperationTime: [Function: advanceOperationTime],
    advanceClusterTime: [Function: advanceClusterTime],
    equals: [Function: equals],
    incrementTransactionNumber: [Function: incrementTransactionNumber],
    inTransaction: [Function: inTransaction],
    startTransaction: [Function: startTransaction],
    commitTransaction: [AsyncFunction: commitTransaction],
    abortTransaction: [AsyncFunction: abortTransaction],
    toBSON: [Function: toBSON],
    withTransaction: [AsyncFunction: withTransaction],
    [Symbol(Symbol.asyncDispose)]: [AsyncFunction: asyncDispose],
    emitAndLog: [Function: emitAndLog],
    emitAndLogHeartbeat: [Function: emitAndLogHeartbeat],
    emitAndLogCommand: [Function: emitAndLogCommand],
    setMaxListeners: [Function: setMaxListeners2],
    getMaxListeners: [Function: getMaxListeners2],
    emit: [Function: emit],
    addListener: [Function: addListener],
    on: [Function: addListener],
    prependListener: [Function: prependListener],
    once: [Function: once2],
    prependOnceListener: [Function: prependOnceListener],
    removeListener: [Function: removeListener],
    off: [Function: removeListener],
    removeAllListeners: [Function: removeAllListeners],
    listeners: [Function: listeners],
    rawListeners: [Function: rawListeners],
    listenerCount: [Function: listenerCount2],
    eventNames: [Function: eventNames],
  },
  deserializationOptions: {
    readPreference: ReadPreference {
      mode: "primary",
      tags: undefined,
      hedge: undefined,
      maxStalenessSeconds: undefined,
      minWireVersion: undefined,
      preference: [Getter],
      isValid: [Function: isValid],
      secondaryOk: [Function: secondaryOk],
      equals: [Function: equals],
      toJSON: [Function: toJSON],
    },
    fieldsAsRaw: {},
    useBigInt64: false,
    promoteValues: true,
    promoteBuffers: false,
    promoteLongs: true,
    serializeFunctions: false,
    ignoreUndefined: false,
    bsonRegExp: false,
    raw: false,
    enableUtf8Validation: true,
    timeoutMS: undefined,
    validation: {
      utf8: true,
    },
  },
  numReturned: 0,
  cursorFilter: {},
  findOptions: {
    raw: false,
    useBigInt64: false,
    promoteLongs: true,
    promoteValues: true,
    promoteBuffers: false,
    ignoreUndefined: false,
    bsonRegExp: false,
    serializeFunctions: false,
    fieldsAsRaw: {},
    enableUtf8Validation: true,
    readPreference: ReadPreference {
      mode: "primary",
      tags: undefined,
      hedge: undefined,
      maxStalenessSeconds: undefined,
      minWireVersion: undefined,
      preference: [Getter],
      isValid: [Function: isValid],
      secondaryOk: [Function: secondaryOk],
      equals: [Function: equals],
      toJSON: [Function: toJSON],
    },
  },
  clone: [Function: clone],
  map: [Function: map],
  _initialize: [AsyncFunction: _initialize],
  getMore: [AsyncFunction: getMore],
  count: [AsyncFunction: count],
  explain: [AsyncFunction: explain],
  filter: [Function: filter],
  hint: [Function: hint],
  min: [Function: min],
  max: [Function: max],
  returnKey: [Function: returnKey],
  showRecordId: [Function: showRecordId],
  addQueryModifier: [Function: addQueryModifier],
  comment: [Function: comment],
  maxAwaitTimeMS: [Function: maxAwaitTimeMS],
  maxTimeMS: [Function: maxTimeMS],
  project: [Function: project],
  sort: [Function: sort],
  allowDiskUse: [Function: allowDiskUse],
  collation: [Function: collation],
  limit: [Function: limit],
  skip: [Function: skip],
  id: [Getter],
  isDead: [Getter],
  client: [Getter],
  server: [Getter],
  namespace: [Getter],
  readPreference: [Getter],
  readConcern: [Getter],
  session: [Getter/Setter],
  closed: [Getter],
  killed: [Getter],
  loadBalanced: [Getter],
  asyncDispose: [AsyncFunction: asyncDispose],
  bufferedCount: [Function: bufferedCount],
  readBufferedDocuments: [Function: readBufferedDocuments],
  stream: [Function: stream],
  hasNext: [AsyncFunction: hasNext],
  next: [AsyncFunction: next],
  tryNext: [AsyncFunction: tryNext],
  forEach: [AsyncFunction: forEach],
  close: [AsyncFunction: close],
  toArray: [AsyncFunction: toArray],
  addCursorFlag: [Function: addCursorFlag],
  withReadPreference: [Function: withReadPreference],
  withReadConcern: [Function: withReadConcern],
  batchSize: [Function: batchSize],
  rewind: [Function: rewind],
  cursorInit: [AsyncFunction: cursorInit],
  fetchBatch: [AsyncFunction: fetchBatch],
  cleanup: [AsyncFunction: cleanup],
  emitClose: [Function: emitClose],
  transformDocument: [AsyncFunction: transformDocument],
  throwIfInitialized: [Function: throwIfInitialized],
  [Symbol(Symbol.asyncIterator)]: [AsyncGeneratorFunction: AsyncGeneratorFunction],
  [Symbol(Symbol.asyncDispose)]: [AsyncFunction: asyncDispose],
  emitAndLog: [Function: emitAndLog],
  emitAndLogHeartbeat: [Function: emitAndLogHeartbeat],
  emitAndLogCommand: [Function: emitAndLogCommand],
  setMaxListeners: [Function: setMaxListeners2],
  getMaxListeners: [Function: getMaxListeners2],
  emit: [Function: emit],
  addListener: [Function: addListener],
  on: [Function: addListener],
  prependListener: [Function: prependListener],
  once: [Function: once2],
  prependOnceListener: [Function: prependOnceListener],
  removeListener: [Function: removeListener],
  off: [Function: removeListener],
  removeAllListeners: [Function: removeAllListeners],
  listeners: [Function: listeners],
  rawListeners: [Function: rawListeners],
  listenerCount: [Function: listenerCount2],
  eventNames: [Function: eventNames],
} The comments
